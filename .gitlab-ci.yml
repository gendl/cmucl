variables:
  download_url: "https://common-lisp.net/project/cmucl/downloads/snapshots/2024/08"
  version: "2024-08-x86"
  bootstrap: ""


stages:
  - install
  - build
  - test
  - ansi-test
  - benchmark
  - analyze

cache:


linux:install:
  stage: install
  tags:
    - linux
  artifacts:
    paths:
      - snapshot/
  script:
    - wget -nv $download_url/cmucl-$version-linux.tar.bz2
    - wget -nv $download_url/cmucl-$version-linux.extra.tar.bz2
    - mkdir snapshot
    - (cd snapshot; tar xjf ../cmucl-$version-linux.tar.bz2; tar xjf ../cmucl-$version-linux.extra.tar.bz2)

linux:build:
  stage: build
  tags:
    - linux
  artifacts:
    paths:
      - dist/
      - linux-2/*.log
      - linux-3/*.log
      - linux-4/
  needs:
    - job: linux:install
      artifacts: true
  script:
    # Do cross compile first
    #- bin/create-target.sh xtarget x86_linux_clang
    #- bin/create-target.sh xcross x86_linux_clang
    #- bin/cross-build-world.sh -crl -B boot-2020-04-1 xtarget xcross src/tools/cross-scripts/cross-x86-x86.lisp snapshot/bin/lisp
    # Regular build using the cross-compiled result or snapshot.  The
    # analyzer job requires gcc, so make sure we build with gcc here
    # instead of clang. 
    - bin/build.sh $bootstrap -R -C "x86_linux" -o snapshot/bin/lisp
    # - bin/build.sh $bootstrap -R -C "x86_linux" -o snapshot/bin/lisp
    # If needed use -V to specify the version in case some tag makes git
    # describe return something that make-dist.sh doesn't like.
    - bin/make-dist.sh -I dist linux-4

linux:cross-build:
  stage: build
  tags:
    - linux
  artifacts:
    paths:
      - xdist/
      - linux-2/*.log
      - linux-3/*.log
      - linux-4/*.log
      # The lisp directory is needed for the static analyzer job.
      - linux-4/lisp
  needs:

    # Normally need the linux:install stage to get the compiler to
    # use.  But for #337, we need the normal build from linux:build to
    # do the cross-compile.  Once the snapshot is made, we can use
    # linux:install instead.
    - job: linux:build
    #- job: linux:install
      artifacts: true
  script:
    - bin/create-target.sh xtarget
    - bin/create-target.sh xcross
    - bin/cross-build-world.sh -crl xtarget xcross src/tools/cross-scripts/cross-x86-x86.lisp dist/bin/lisp
    - bin/build.sh -b xlinux $bootstrap -R -C "" -o xtarget/lisp/lisp
    - bin/make-dist.sh -I xdist xlinux-4

linux:test:
  stage: test
  tags:
    - linux
  artifacts:
    paths:
      - ansi-test/test.out
      - test.log
  needs:
    # Needs artifacts from build (dist/)
    - job: linux:build
      artifacts: true
  script:
    - bin/run-unit-tests.sh -l dist/bin/lisp 2>&1 | tee test.log

linux:exec-test:
  stage: test
  tags:
    - linux
  needs:
    - job: linux:build
      artifacts: true
  script:
    # Create an executable and test it by printing the version.
    - dist/bin/lisp -eval '(save-lisp "saved-lisp-executable" :executable t)'
    - ./saved-lisp-executable --version

linux:cross-test:
  stage: test
  tags:
    - linux
  artifacts:
    paths:
      - ansi-test/test.out
      - cross-test.log
  needs:
    # Needs artifacts from build (dist/)
    - job: linux:cross-build
      artifacts: true
  script:
    - bin/run-unit-tests.sh -l xdist/bin/lisp 2>&1 | tee cross-test.log

linux:ansi-test:
  stage: ansi-test
  tags:
    - linux
  artifacts:
    paths:
      - ansi-test/test.out
  needs:
    # Needs artifacts from build (dist/)
    - job: linux:build
      artifacts: true
  script:
    - bin/run-ansi-tests.sh -l dist/bin/lisp
    
linux:benchmark:
  stage: benchmark
  tags:
    - linux
  artifacts:
    paths:
      - benchmarks/cl-bench/results
  needs:
    # Needs artifacts from install (snapshot/) and build (dist/)
    - job: linux:install
      artifacts: true
    - job: linux:build
  script:
    - cd benchmarks/cl-bench
    - mkdir tmp
    - CMUCL=../../snapshot/bin/lisp ./run-cmucl.sh
    - CMUCL=../../dist/bin/lisp ./run-cmucl.sh
    - ../../snapshot/bin/lisp -load report

osx:install:
  stage: install
  tags:
    - macos-virtualbox
  artifacts:
    paths:
      - snapshot/
  script:
    - echo PATH = $PATH
    - ls -F /usr/local/bin
    - type -all gitlab-runner
    - /opt/local/bin/curl -o cmucl-$version-darwin.tar.bz2 $download_url/cmucl-$version-darwin.tar.bz2
    - mkdir snapshot
    - (cd snapshot; tar xjf ../cmucl-$version-darwin.tar.bz2)

osx:build:
  stage: build
  tags:
    - macos-virtualbox
  artifacts:
    paths:
      - dist/
      - darwin-2/*.log
      - darwin-3/*.log
      - darwin-4/*.log
  needs:
    - job: osx:install
      artifacts: true
  script:
    # Do cross compile first
    #- bin/create-target.sh xtarget x86_darwin
    #- bin/create-target.sh xcross x86_darwin
    #- bin/cross-build-world.sh -crl -B boot-2020-04-1 xtarget xcross src/tools/cross-scripts/cross-x86-x86.lisp snapshot/bin/lisp
    # Regular build using the cross-compiled result or snapshot.
    # Need /opt/local/bin to get msgmerge and msgfmt programs.
    - PATH=/opt/local/bin:$PATH bin/build.sh $bootstrap -R -C "" -o snapshot/bin/lisp
    # If needed use -V to specify the version in case some tag makes git
    # describe return something that make-dist.sh doesn't like.
    - bin/make-dist.sh -I dist darwin-4

osx:test:
  stage: test
  tags:
    - macos-virtualbox
  artifacts:
    paths:
      - ansi-test/test.out
      - test.log
  needs:
    # Needs artifacts from build (dist/)
    - job: osx:build
      artifacts: true
  script:
    - echo LANG = $LANG
    - bin/run-unit-tests.sh -l dist/bin/lisp 2>&1 | tee test.log

osx:exec-test:
  stage: test
  tags:
    - macos-virtualbox
  needs:
    - job: osx:build
      artifacts: true
  script:
    # Create an executable and test it by printing the version.
    - dist/bin/lisp -eval '(save-lisp "saved-lisp-executable" :executable t)'
    - ./saved-lisp-executable --version
  
osx:ansi-test:
  stage: ansi-test
  tags:
    - macos-virtualbox
  artifacts:
    paths:
      - ansi-test/test.out
  needs:
    # Needs artifacts from build (dist/)
    - job: osx:build
      artifacts: true
  script:
    # NB: sometimes we can't clone the ansi-test repo (bad cert!?!).
    # Manually cloning it in the gitlab build dir helps with this
    # issue until we can figure out what's going on.
    - bin/run-ansi-tests.sh -l dist/bin/lisp
  
osx:benchmark:
  stage: benchmark
  tags:
    - macos-virtualbox
  artifacts:
    paths:
      - benchmarks/cl-bench/results
  needs:
    # Needs artifacts from install (snapshot/) and build (dist/)
    - job: osx:install
      artifacts: true
    - job:  osx:build
  script:
    - cd benchmarks/cl-bench
    - mkdir tmp
    - CMUCL=../../snapshot/bin/lisp ./run-cmucl.sh
    - CMUCL=../../dist/bin/lisp ./run-cmucl.sh
    - ../../snapshot/bin/lisp -load report

# Optional job that runs the static analyzer.  It needs the files from
# the linux-4 directory built in the linux:build job.
linux:static-analyzer:
  stage: analyze
  when: manual
  tags:
    - linux
  artifacts:
    paths:
      - analyzer.log
  needs:
    - job: linux:build
      artifacts: true
  script:
    # Analysis can generate huge amounts of output.  For now just save
    # the results to the log file instead of also having it go to the
    # console.  If someday there's less or no output, we can consider
    # having the logs go to the console too.
    - make -C linux-4/lisp clean
    - make -C linux-4/lisp CFLAGS=-fanalyzer > analyzer.log 2>&1 

opensuse:install:
  stage: install
  tags:
    - opensuse
  artifacts:
    paths:
      - snapshot/
  script:
    - wget -nv $download_url/cmucl-$version-linux.tar.bz2
    - wget -nv $download_url/cmucl-$version-linux.extra.tar.bz2
    - mkdir snapshot
    - (cd snapshot; tar xjf ../cmucl-$version-linux.tar.bz2; tar xjf ../cmucl-$version-linux.extra.tar.bz2)

opensuse:build:
  stage: build
  tags:
    - opensuse
  artifacts:
    paths:
      - dist/
      - linux-2/*.log
      - linux-3/*.log
      - linux-4/
  needs:
    - job: opensuse:install
      artifacts: true
  script:
    # Do cross compile first
    #- bin/create-target.sh xtarget x86_linux_clang
    #- bin/create-target.sh xcross x86_linux_clang
    #- bin/cross-build-world.sh -crl -B boot-2020-04-1 xtarget xcross src/tools/cross-scripts/cross-x86-x86.lisp snapshot/bin/lisp
    # Regular build using the cross-compiled result or snapshot.  The
    # analyzer job requires gcc, so make sure we build with gcc here
    # instead of clang. 
    - bin/build.sh $bootstrap -R -C "x86_linux" -o snapshot/bin/lisp
    # - bin/build.sh $bootstrap -R -C "x86_linux" -o snapshot/bin/lisp
    # If needed use -V to specify the version in case some tag makes git
    # describe return something that make-dist.sh doesn't like.
    - bin/make-dist.sh -I dist linux-4

opensuse:test:
  stage: test
  tags:
    - linux
  artifacts:
    paths:
      - ansi-test/test.out
      - test.log
  needs:
    # Needs artifacts from build (dist/)
    - job: opensuse:build
      artifacts: true
  script:
    - bin/run-unit-tests.sh -l dist/bin/lisp 2>&1 | tee test.log

opensuse:ansi-test:
  stage: ansi-test
  tags:
    - linux
  artifacts:
    paths:
      - ansi-test/test.out
  needs:
    # Needs artifacts from build (dist/)
    - job: opensuse:build
      artifacts: true
  script:
    - bin/run-ansi-tests.sh -l dist/bin/lisp

