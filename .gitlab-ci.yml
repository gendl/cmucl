variables:
  download_url: "https://common-lisp.net/project/cmucl/downloads/snapshots/2024/08"
  version: "2024-08-x86"
  bootstrap: "-B boot-2024-08"

# Default install configuration to download the cmucl tarballs to use
# for building.
.install_template: &install_configuration
  stage: install
  artifacts:
    paths:
      - snapshot/
  script:
    - echo PATH = $PATH
    - ls -F /usr/local/bin
    - type -all gitlab-runner
    # Download binaries.  (Do we really need the extras tarball?)
    - $CURL -o cmucl-$version-$osname.tar.bz2 $download_url/cmucl-$version-$osname.tar.bz2
    - $CURL -o cmucl-$version-$osname.extra.tar.bz2 $download_url/cmucl-$version-$osname.extra.tar.bz2
    - mkdir snapshot
    - (cd snapshot; tar xjf ../cmucl-$version-$osname.tar.bz2; tar xjf ../cmucl-$version-$osname.extra.tar.bz2)

# Default build configuration to be added to each build stage for each
# OS.  This assumes we don't need anything special between OSes, and
# the option '-C ""' is good enough.  We also override the default
# build dirs by using the -b option so that we know where the results
# are, independent of OS.
.build_template: &build_configuration
  stage: build
  artifacts:
    paths:
      - dist/
      - build-2/*.log
      - build-3/*.log
      - build-4/
      # Needed by Linux analyzer stage
      - src/lisp/cmucl-version.h
      # Save this so we can see the generated errno
      - src/code/errno.lisp
  script:
    # Do cross compile first
    #- bin/create-target.sh xtarget x86_linux_clang
    #- bin/create-target.sh xcross x86_linux_clang
    #- bin/cross-build-world.sh -crl -B boot-2020-04-1 xtarget xcross src/tools/cross-scripts/cross-x86-x86.lisp snapshot/bin/lisp
    # Regular build using the cross-compiled result or snapshot.  The
    # analyzer job requires gcc, so make sure we build with gcc here
    # instead of clang. 
    - bin/build.sh $bootstrap -b build -R -C "" -o snapshot/bin/lisp
    # When the result of `git describe` cannot be used as a version
    # string, an alternative can be provided with the -V flag
    - bin/make-dist.sh -I dist build-4

# Default configuration for running the ansi-tests.
.ansi_test_template: &ansi_test_configuration
  stage: ansi-test
  artifacts:
    paths:
      - ansi-test/test.out
  script:
    - bin/run-ansi-tests.sh -l dist/bin/lisp
  
# Default configuration for running unit tests.
.unit_test_template: &unit_test_configuration
  stage: test
  artifacts:
    paths:
      - ansi-test/test.out
      - test.log
  script:
    - echo LANG = $LANG
    - bin/run-unit-tests.sh -l dist/bin/lisp 2>&1 | tee test.log

# Default configuration to test creation of lisp executable and
# testing the exectuable works.
.exec_test_template: &exec_test_configuration
  stage: test
  script:
    # Create an executable and test it by printing the version.
    - dist/bin/lisp -eval '(save-lisp "saved-lisp-executable" :executable t)'
    - ./saved-lisp-executable --version
    # Run the unit tests with the executable, just to make sure the
    # executable works as expected.
    - bin/run-unit-tests.sh -l ./saved-lisp-executable

# Default configuration for running the benchmarks.
.benchmark_template: &benchmark_configuration
  stage: benchmark
  artifacts:
    paths:
      - benchmarks/cl-bench/results
  script:
    - cd benchmarks/cl-bench
    - mkdir tmp
    - CMUCL=../../snapshot/bin/lisp ./run-cmucl.sh
    - CMUCL=../../dist/bin/lisp ./run-cmucl.sh
    - ../../snapshot/bin/lisp -load report
    
stages:
  - link-check
  - install
  - build
  - test
  - ansi-test
  - benchmark
  - analyze

cache:

#### Linux jobs ####
linux:install:
  <<: *install_configuration
  tags:
    - linux
  variables:
    osname: "linux"
    CURL: "curl"

linux:build:
  <<: *build_configuration
  tags:
    - linux
  needs:
    - job: linux:install
      artifacts: true

linux:cross-build:
  stage: build
  tags:
    - linux
  artifacts:
    paths:
      - xdist/
      - linux-2/*.log
      - linux-3/*.log
      - linux-4/*.log
      # The lisp directory is needed for the static analyzer job.
      - linux-4/lisp
  needs:

    # Normally need the linux:install stage to get the compiler to
    # use.  But for #337, we need the normal build from linux:build to
    # do the cross-compile.  Once the snapshot is made, we can use
    # linux:install instead.
    - job: linux:build
    #- job: linux:install
      artifacts: true
  script:
    - bin/create-target.sh xtarget
    - bin/create-target.sh xcross
    - bin/cross-build-world.sh -crl xtarget xcross src/tools/cross-scripts/cross-x86-x86.lisp dist/bin/lisp
    - bin/build.sh -b xlinux $bootstrap -R -C "" -o "xtarget/lisp/lisp -lib xtarget/lisp"
    - bin/make-dist.sh -I xdist xlinux-4

linux:test:
  <<: *unit_test_configuration
  tags:
    - linux
  needs:
    # Needs artifacts from build (dist/)
    - job: linux:build
      artifacts: true

linux:exec-test:
  <<: *exec_test_configuration
  tags:
    - linux
  needs:
    - job: linux:build
      artifacts: true

linux:cross-test:
  stage: test
  tags:
    - linux
  artifacts:
    paths:
      - ansi-test/test.out
      - cross-test.log
  needs:
    # Needs artifacts from build (dist/)
    - job: linux:cross-build
      artifacts: true
  script:
    - bin/run-unit-tests.sh -l xdist/bin/lisp 2>&1 | tee cross-test.log

linux:ansi-test:
  <<: *ansi_test_configuration
  tags:
    - linux
  needs:
    # Needs artifacts from build (dist/)
    - job: linux:build
      artifacts: true
    
linux:benchmark:
  <<: *benchmark_configuration
  tags:
    - linux
  needs:
    # Needs artifacts from install (snapshot/) and build (dist/)
    - job: linux:install
      artifacts: true
    - job: linux:build

#### OSX (Mac) jobs ####
osx:install:
  <<: *install_configuration
  tags:
    - macos-virtualbox
  variables:
    osname: "darwin"
    CURL: "/opt/local/bin/curl"

osx:build:
  <<: *build_configuration
  tags:
    - macos-virtualbox
  needs:
    - job: osx:install
      artifacts: true

osx:test:
  <<: *unit_test_configuration
  tags:
    - macos-virtualbox
  needs:
    # Needs artifacts from build (dist/)
    - job: osx:build
      artifacts: true

osx:exec-test:
  <<: *exec_test_configuration
  tags:
    - macos-virtualbox
  needs:
    - job: osx:build
      artifacts: true
  
osx:ansi-test:
  <<: *ansi_test_configuration
  tags:
    - macos-virtualbox
  needs:
    # Needs artifacts from build (dist/)
    - job: osx:build
      artifacts: true
  
osx:benchmark:
  <<: *benchmark_configuration
  tags:
    - macos-virtualbox
  needs:
    # Needs artifacts from install (snapshot/) and build (dist/)
    - job: osx:install
      artifacts: true
    - job:  osx:build

# Optional job that runs the static analyzer.  It needs the files from
# the linux-4 directory built in the linux:build job.
linux:static-analyzer:
  stage: analyze
  when: manual
  tags:
    - linux
  artifacts:
    paths:
      - analyzer.log
  needs:
    - job: linux:build
      artifacts: true
  script:
    # Analysis can generate huge amounts of output.  For now just save
    # the results to the log file instead of also having it go to the
    # console.  If someday there's less or no output, we can consider
    # having the logs go to the console too.
    - make -C build-4/lisp clean
    - make -C build-4/lisp CFLAGS=-fanalyzer > analyzer.log 2>&1 

#### OpenSUSE jobs ####
opensuse:install:
  <<: *install_configuration
  tags:
    - opensuse
  variables:
    osname: "linux"
    CURL: "curl"

opensuse:build:
  <<: *build_configuration
  tags:
    - opensuse
  needs:
    - job: opensuse:install
      artifacts: true

opensuse:test:
  <<: *unit_test_configuration
  tags:
    - opensuse
  needs:
    # Needs artifacts from build (dist/)
    - job: opensuse:build
      artifacts: true

opensuse:ansi-test:
  <<: *ansi_test_configuration
  tags:
    - opensuse
  needs:
    # Needs artifacts from build (dist/)
    - job: opensuse:build
      artifacts: true

# From https://github.com/tcort/markdown-link-check
# Checks links on the wiki pages whenever any wiki markdown pages change. 
linkchecker:
  stage: link-check
  # Only the linux runner has markdown-link-check installed
  tags:
    - linux
  # It's ok if this fails; we don't want to declare the entire
  # pipeline as having failed.
  allow_failure: true
  script:
    # Check links in the main repo
    - find . -name \*.md -print0 | xargs -0 -n1 markdown-link-check
    # Clone the wiki pages and check the links there.
    - git clone https://gitlab.common-lisp.net/cmucl/cmucl.wiki.git
    - find cmucl.wiki -name \*.md -print0 | xargs -0 -n1 markdown-link-check
