# @ cmucl-sparc-vm
# SOME DESCRIPTIVE TITLE
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CMUCL 20E\n"
"Report-Msgid-Bugs-To: \n"
"PO-Revision-Date: YEAR-MO-DA HO:MI +ZONE\n"
"Last-Translator: Automatic translation\n"
"Language-Team: Pig Latin (auto-translated)\n"
"Language: Pig Latin\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: src/code/sparc-svr4-vm.lisp
msgid "Returns a string describing the type of the local machine."
msgstr ""
"Eturnsray away ingstray escribingday ethay ypetay ofway ethay ocallay "
"achinemay."

#: src/code/sparc-svr4-vm.lisp
msgid "Returns a string describing the version of the local machine."
msgstr ""
"Eturnsray away ingstray escribingday ethay ersionvay ofway ethay ocallay "
"achinemay."

#: src/code/sparc-svr4-vm.lisp
msgid "Unaligned instruction?  offset=#x~X."
msgstr "Unalignedway instructionway?  offsetway=#x~X."

#: src/code/sparc-svr4-vm.lisp
msgid "Can't deal with CALL fixups, yet."
msgstr "Ancay't ealday ithway CALL ixupsfay, etyay."

#: src/code/sparc-svr4-vm.lisp
msgid "XRS ID invalid but attempting to access double-float register ~d!"
msgstr ""
"XRS ID invalidway utbay attemptingway otay accessway oubleday-oatflay "
"egisterray ~d!"

#: src/code/signal.lisp
msgid "Emt instruction"
msgstr "Emtway instructionway"

#: src/code/signal.lisp
msgid "Bad argument to system call"
msgstr "Adbay argumentway otay ystemsay allcay"

#: src/code/signal.lisp
msgid "Process's lwps are blocked"
msgstr "Ocesspray's wpslay areway ockedblay"

#: src/code/debug-int.lisp
msgid "no debug info: ~A:~A"
msgstr "onay ebugday infoway: ~Away:~Away"

#: src/code/debug-int.lisp
msgid "find the PC"
msgstr "indfay ethay PC"

#: src/code/debug-int.lisp
msgid "Local non-descriptor register access?"
msgstr "Ocallay onnay-escriptorday egisterray accessway?"

#: src/code/debug-int.lisp
msgid "Local interior register access?"
msgstr "Ocallay interiorway egisterray accessway?"

#: src/code/debug-int.lisp
msgid "Breakpoint that nobody wants?"
msgstr "Eakpointbray atthay obodynay antsway?"

#: src/code/debug-int.lisp
msgid "BREAKPOINT-DO-DISPLACED-INST returned?"
msgstr "BREAKPOINT-DO-DISPLACED-INST eturnedray?"

#: src/compiler/sparc/parms.lisp
msgid "Number of bits per word where a word holds one lisp descriptor."
msgstr ""
"Umbernay ofway itsbay erpay ordway erewhay away ordway oldshay oneway isplay "
"escriptorday."

#: src/compiler/sparc/parms.lisp
msgid ""
"Number of bits per byte where a byte is the smallest addressable object."
msgstr ""
"Umbernay ofway itsbay erpay ytebay erewhay away ytebay isway ethay "
"mallestsay addressableway objectway."

#: src/compiler/sparc/parms.lisp
msgid "Number of bits needed to represent a character"
msgstr "Umbernay ofway itsbay eedednay otay epresentray away aracterchay"

#: src/compiler/sparc/parms.lisp
msgid "Number of bytes needed to represent a character"
msgstr "Umbernay ofway ytesbay eedednay otay epresentray away aracterchay"

#: src/compiler/sparc/parms.lisp
msgid "Number of bits to shift between word addresses and byte addresses."
msgstr ""
"Umbernay ofway itsbay otay iftshay etweenbay ordway addressesway andway "
"ytebay addressesway."

#: src/compiler/sparc/parms.lisp
msgid "Number of bytes in a word."
msgstr "Umbernay ofway ytesbay inway away ordway."

#: src/compiler/sparc/parms.lisp
msgid "Number of bits at the low end of a pointer used for type information."
msgstr ""
"Umbernay ofway itsbay atway ethay owlay endway ofway away ointerpay usedway "
"orfay ypetay informationway."

#: src/compiler/sparc/parms.lisp
msgid "Mask to extract the low tag bits from a pointer."
msgstr "Askmay otay extractway ethay owlay agtay itsbay omfray away ointerpay."

#: src/compiler/sparc/parms.lisp
msgid ""
"Exclusive upper bound on the value of the low tag bits from a\n"
"  pointer."
msgstr ""
"Exclusiveway upperway oundbay onway ethay aluevay ofway ethay owlay agtay "
"itsbay omfray away\n"
"  ointerpay."

#: src/compiler/sparc/parms.lisp
msgid "Number of tag bits used for a fixnum"
msgstr "Umbernay ofway agtay itsbay usedway orfay away ixnumfay"

#: src/compiler/sparc/parms.lisp
msgid "Mask to get the fixnum tag"
msgstr "Askmay otay etgay ethay ixnumfay agtay"

#: src/compiler/sparc/parms.lisp
msgid "Maximum number of bits in a positive fixnum"
msgstr "Aximummay umbernay ofway itsbay inway away ositivepay ixnumfay"

#: src/compiler/sparc/insts.lisp
msgid "~S isn't a register."
msgstr "~S isnway't away egisterray."

#: src/compiler/sparc/insts.lisp
msgid "~S isn't a floating-point register."
msgstr "~S isnway't away oatingflay-ointpay egisterray."

#: src/compiler/sparc/insts.lisp
msgid ""
"If non-NIL, print registers using the Lisp register names.\n"
"Otherwise, use the Sparc register names"
msgstr ""
"Ifway onnay-NIL, intpray egistersray usingway ethay Isplay egisterray "
"amesnay.\n"
"Otherwiseway, useway ethay Arcspay egisterray amesnay"

#: src/compiler/sparc/array.lisp src/compiler/sparc/call.lisp
#: src/compiler/sparc/alloc.lisp src/compiler/sparc/cell.lisp
#: src/compiler/sparc/c-call.lisp src/compiler/sparc/debug.lisp
#: src/compiler/sparc/arith.lisp src/compiler/sparc/static-fn.lisp
#: src/compiler/sparc/char.lisp src/compiler/sparc/system.lisp
#: src/compiler/sparc/sap.lisp src/compiler/sparc/float.lisp
#: src/compiler/sparc/move.lisp src/compiler/sparc/insts.lisp
msgid "Unknown SC to SC-Case for ~S:~%  ~S"
msgstr "Unknownway SC otay SC-Asecay orfay ~S:~%  ~S"

#: src/compiler/sparc/insts.lisp
msgid "The Lisp names for the Sparc integer registers"
msgstr "Ethay Isplay amesnay orfay ethay Arcspay integerway egistersray"

#: src/compiler/sparc/insts.lisp
msgid "The standard names for the Sparc integer registers"
msgstr "Ethay tandardsay amesnay orfay ethay Arcspay integerway egistersray"

#: src/compiler/sparc/insts.lisp
msgid ""
"An alist for the disassembler indicating the target register and\n"
"value used in a SETHI instruction.  This is used to make annotations\n"
"about function addresses and register values."
msgstr ""
"Anway alistway orfay ethay isassemblerday indicatingway ethay argettay "
"egisterray andway\n"
"aluevay usedway inway away SETHI instructionway.  Isthay isway usedway otay "
"akemay annotationsway\n"
"aboutway unctionfay addressesway andway egisterray aluesvay."

#: src/compiler/sparc/insts.lisp
msgid "Set pseudo-atomic flag"
msgstr "Etsay seudopay-atomicway agflay"

#: src/compiler/sparc/insts.lisp
msgid "Reset pseudo-atomic"
msgstr "Esetray seudopay-atomicway"

#: src/compiler/sparc/insts.lisp
msgid "Allocating ~D bytes"
msgstr "Allocatingway ~D ytesbay"

#: src/compiler/sparc/insts.lisp
msgid "Allocating bytes"
msgstr "Allocatingway ytesbay"

#: src/compiler/sparc/insts.lisp
msgid "Header word ~A, size ~D?"
msgstr "Eaderhay ordway ~Away, izesay ~D?"

#: src/compiler/sparc/insts.lisp
msgid "Reset pseudo-atomic flag"
msgstr "Esetray seudopay-atomicway agflay"

#: src/compiler/sparc/insts.lisp
msgid "pseudo-atomic interrupted?"
msgstr "seudopay-atomicway interruptedway?"

#: src/compiler/sparc/insts.lisp
msgid "Unknown branch condition: ~S~%Must be one of: ~S"
msgstr "Unknownway anchbray onditioncay: ~S~%Ustmay ebay oneway ofway: ~S"

#: src/compiler/sparc/insts.lisp
msgid "Unknown fp-branch condition: ~S~%Must be one of: ~S"
msgstr "Unknownway pfay-anchbray onditioncay: ~S~%Ustmay ebay oneway ofway: ~S"

#: src/compiler/sparc/insts.lisp
msgid "Unknown integer condition register:  ~S~%"
msgstr "Unknownway integerway onditioncay egisterray:  ~S~%"

#: src/compiler/sparc/insts.lisp
msgid "Unknown branch prediction:  ~S~%Must be one of: ~S~%"
msgstr "Unknownway anchbray edictionpray:  ~S~%Ustmay ebay oneway ofway: ~S~%"

#: src/compiler/sparc/insts.lisp
msgid "Unknown conditional move condition register:  ~S~%"
msgstr "Unknownway onditionalcay ovemay onditioncay egisterray:  ~S~%"

#: src/compiler/sparc/insts.lisp
msgid "Unknown register condition:  ~S~%"
msgstr "Unknownway egisterray onditioncay:  ~S~%"

#: src/compiler/sparc/insts.lisp
msgid "Fixups aren't allowed."
msgstr "Ixupsfay arenway't allowedway."

#: src/compiler/sparc/insts.lisp
msgid "Pseudo atomic interrupted trap?"
msgstr "Seudopay atomicway interruptedway aptray?"

#: src/compiler/sparc/insts.lisp
msgid "Allocation trap"
msgstr "Allocationway aptray"

#: src/compiler/sparc/insts.lisp
msgid "Use it anyway"
msgstr "Useway itway anywayway"

#: src/compiler/sparc/insts.lisp
msgid ""
"Immediate trap number ~A specified, but only trap numbers\n"
"   16 to 31 are available to the application"
msgstr ""
"Immediateway aptray umbernay ~Away ecifiedspay, utbay onlyway aptray "
"umbersnay\n"
"   16 otay 31 areway availableway otay ethay applicationway"

#: src/compiler/sparc/macros.lisp
msgid "Move SRC into DST unless they are location=."
msgstr "Ovemay SRC intoway DST unlessway eythay areway ocationlay=."

#: src/compiler/sparc/macros.lisp
msgid ""
"Loads the type bits of a pointer into target independent of\n"
"  byte-ordering issues."
msgstr ""
"Oadslay ethay ypetay itsbay ofway away ointerpay intoway argettay "
"independentway ofway\n"
"  ytebay-orderingway issuesway."

#: src/compiler/sparc/macros.lisp
msgid "Jump to the lisp function FUNCTION.  LIP is an interior-reg temporary."
msgstr ""
"Umpjay otay ethay isplay unctionfay FUNCTION.  LIP isway anway interiorway-"
"egray emporarytay."

#: src/compiler/sparc/macros.lisp
msgid "Return to RETURN-PC."
msgstr "Eturnray otay RETURN-PC."

#: src/compiler/sparc/macros.lisp
msgid ""
"Emit a return-pc header word.  LABEL is the label to use for this return-pc."
msgstr ""
"Emitway away eturnray-cpay eaderhay ordway.  LABEL isway ethay abellay otay "
"useway orfay isthay eturnray-cpay."

#: src/compiler/sparc/macros.lisp
msgid "Move the TN Reg-Or-Stack into Reg if it isn't already there."
msgstr ""
"Ovemay ethay TN Egray-Orway-Tacksay intoway Egray ifway itway isnway't "
"alreadyway erethay."

#: src/compiler/sparc/macros.lisp
msgid ""
"Do stuff to allocate an other-pointer object of fixed Size with a single\n"
"  word header having the specified Type-Code.  The result is placed in\n"
"  Result-TN, and Temp-TN is a non-descriptor temp (which may be randomly "
"used\n"
"  by the body.)  The body is placed inside the PSEUDO-ATOMIC, and "
"presumably\n"
"  initializes the object."
msgstr ""
"Oday tuffsay otay allocateway anway otherway-ointerpay objectway ofway "
"ixedfay Izesay ithway away inglesay\n"
"  ordway eaderhay avinghay ethay ecifiedspay Ypetay-Odecay.  Ethay esultray "
"isway acedplay inway\n"
"  Esultray-TN, andway Emptay-TN isway away onnay-escriptorday emptay "
"(ichwhay aymay ebay andomlyray usedway\n"
"  ybay ethay odybay.)  Ethay odybay isway acedplay insideway ethay PSEUDO-"
"ATOMIC, andway esumablypray\n"
"  initializesway ethay objectway."

#: src/compiler/sparc/macros.lisp
msgid "~S is less than the specified minimum of ~S"
msgstr "~S isway esslay anthay ethay ecifiedspay inimummay ofway ~S"

#: src/compiler/sparc/macros.lisp
msgid "~S is greater than the specified maximum of ~S"
msgstr "~S isway eatergray anthay ethay ecifiedspay aximummay ofway ~S"

#: src/compiler/sparc/macros.lisp
msgid "~S isn't an even multiple of ~S from ~S"
msgstr "~S isnway't anway evenway ultiplemay ofway ~S omfray ~S"

#: src/compiler/sparc/macros.lisp
msgid ""
"The values ~S cover the entire range from ~\n"
"\t\t\t ~S to ~S [step ~S]."
msgstr ""
"Ethay aluesvay ~S overcay ethay entireway angeray omfray ~\n"
"\t\t\t ~S otay ~S [tepsay ~S]."

#: src/compiler/sparc/macros.lisp
msgid "Must supply at least on type for test-type."
msgstr "Ustmay upplysay atway eastlay onway ypetay orfay esttay-ypetay."

#: src/compiler/sparc/macros.lisp
msgid "OTHER-POINTER-TYPE supersedes the use of ~S"
msgstr "OTHER-POINTER-TYPE upersedessay ethay useway ofway ~S"

#: src/compiler/sparc/macros.lisp
msgid "OTHER-IMMEDIATE-n-TYPE supersedes the use of ~S"
msgstr "OTHER-IMMEDIATE-n-TYPE upersedessay ethay useway ofway ~S"

#: src/compiler/sparc/macros.lisp
msgid ""
"Can't test for mix of function subtypes and normal ~\n"
"\t\theader types."
msgstr ""
"Ancay't esttay orfay ixmay ofway unctionfay ubtypessay andway ormalnay ~\n"
"\t\teaderhay ypestay."

#: src/compiler/sparc/macros.lisp
msgid "Cause an error.  ERROR-CODE is the error to cause."
msgstr "Ausecay anway errorway.  ERROR-CODE isway ethay errorway otay ausecay."

#: src/compiler/sparc/macros.lisp
msgid ""
"Cause a continuable error.  If the error is continued, execution resumes at\n"
"  LABEL."
msgstr ""
"Ausecay away ontinuablecay errorway.  Ifway ethay errorway isway "
"ontinuedcay, executionway esumesray atway\n"
"  LABEL."

#: src/compiler/sparc/macros.lisp
msgid ""
"Generate-Error-Code Error-code Value*\n"
"  Emit code for an error with the specified Error-Code and context Values."
msgstr ""
"Enerategay-Errorway-Odecay Errorway-odecay Alue*Vay\n"
"  Emitway odecay orfay anway errorway ithway ethay ecifiedspay Errorway-"
"Odecay andway ontextcay Aluesvay."

#: src/compiler/sparc/macros.lisp
msgid ""
"Generate-CError-Code Error-code Value*\n"
"  Emit code for a continuable error with the specified Error-Code and\n"
"  context Values.  If the error is continued, execution resumes after\n"
"  the GENERATE-CERROR-CODE form."
msgstr ""
"Enerategay-Errorcay-Odecay Errorway-odecay Alue*Vay\n"
"  Emitway odecay orfay away ontinuablecay errorway ithway ethay ecifiedspay "
"Errorway-Odecay andway\n"
"  ontextcay Aluesvay.  Ifway ethay errorway isway ontinuedcay, executionway "
"esumesray afterway\n"
"  ethay GENERATE-CERROR-CODE ormfay."

#: src/compiler/sparc/move.lisp
msgid "fixnum untagging"
msgstr "ixnumfay untaggingway"

#: src/compiler/sparc/move.lisp
msgid "constant load"
msgstr "onstantcay oadlay"

#: src/compiler/sparc/move.lisp
msgid ""
"Load TN allocated, but no move function?~@\n"
"\t           VM definition inconsistent, recompile and try again."
msgstr ""
"Oadlay TN allocatedway, utbay onay ovemay unctionfay?~@\n"
"\t           VM efinitionday inconsistentway, ecompileray andway ytray "
"againway."

#: src/compiler/sparc/move.lisp
msgid "integer to untagged word coercion"
msgstr "integerway otay untaggedway ordway oercioncay"

#: src/compiler/sparc/move.lisp
msgid "fixnum tagging"
msgstr "ixnumfay aggingtay"

#: src/compiler/sparc/move.lisp
msgid "signed word to integer coercion"
msgstr "ignedsay ordway otay integerway oercioncay"

#: src/compiler/sparc/move.lisp
msgid "unsigned word to integer coercion"
msgstr "unsignedway ordway otay integerway oercioncay"

#: src/compiler/sparc/move.lisp
msgid "word integer move"
msgstr "ordway integerway ovemay"

#: src/compiler/sparc/move.lisp
msgid "word integer argument move"
msgstr "ordway integerway argumentway ovemay"

#: src/compiler/sparc/move.lisp
msgid "signed 64-bit word to integer coercion"
msgstr "ignedsay 64-itbay ordway otay integerway oercioncay"

#: src/compiler/sparc/move.lisp
msgid "unsigned 64-bit word to integer coercion"
msgstr "unsignedway 64-itbay ordway otay integerway oercioncay"

#: src/compiler/sparc/float.lisp
msgid "float move"
msgstr "oatflay ovemay"

#: src/compiler/sparc/float.lisp
msgid "float to pointer coercion"
msgstr "oatflay otay ointerpay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "pointer to float coercion"
msgstr "ointerpay otay oatflay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "float argument move"
msgstr "oatflay argumentway ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex single float move"
msgstr "omplexcay inglesay oatflay ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex double float move"
msgstr "omplexcay oubleday oatflay ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex long float move"
msgstr "omplexcay onglay oatflay ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex double-double float move"
msgstr "omplexcay oubleday-oubleday oatflay ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex single float to pointer coercion"
msgstr "omplexcay inglesay oatflay otay ointerpay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "complex double float to pointer coercion"
msgstr "omplexcay oubleday oatflay otay ointerpay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "complex long float to pointer coercion"
msgstr "omplexcay onglay oatflay otay ointerpay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "complex double-double float to pointer coercion"
msgstr "omplexcay oubleday-oubleday oatflay otay ointerpay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "pointer to complex float coercion"
msgstr "ointerpay otay omplexcay oatflay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "pointer to complex double-double float coercion"
msgstr "ointerpay otay omplexcay oubleday-oubleday oatflay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "complex single-float argument move"
msgstr "omplexcay inglesay-oatflay argumentway ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex double-float argument move"
msgstr "omplexcay oubleday-oatflay argumentway ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex long-float argument move"
msgstr "omplexcay onglay-oatflay argumentway ovemay"

#: src/compiler/sparc/float.lisp
msgid "complex double-double float argument move"
msgstr "omplexcay oubleday-oubleday oatflay argumentway ovemay"

#: src/compiler/sparc/float.lisp
msgid "inline float arithmetic"
msgstr "inlineway oatflay arithmeticway"

#: src/compiler/sparc/float.lisp
msgid "inline float comparison"
msgstr "inlineway oatflay omparisoncay"

#: src/compiler/sparc/float.lisp
msgid "inline float coercion"
msgstr "inlineway oatflay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "inline float truncate"
msgstr "inlineway oatflay uncatetray"

#: src/compiler/sparc/float.lisp
msgid "inline ftruncate"
msgstr "inlineway truncatefay"

#: src/compiler/sparc/float.lisp
msgid "inline complex single-float creation"
msgstr "inlineway omplexcay inglesay-oatflay eationcray"

#: src/compiler/sparc/float.lisp
msgid "inline complex double-float creation"
msgstr "inlineway omplexcay oubleday-oatflay eationcray"

#: src/compiler/sparc/float.lisp
msgid "inline complex long-float creation"
msgstr "inlineway omplexcay onglay-oatflay eationcray"

#: src/compiler/sparc/float.lisp
msgid "complex single float realpart"
msgstr "omplexcay inglesay oatflay ealpartray"

#: src/compiler/sparc/float.lisp
msgid "complex single float imagpart"
msgstr "omplexcay inglesay oatflay imagpartway"

#: src/compiler/sparc/float.lisp
msgid "complex double float realpart"
msgstr "omplexcay oubleday oatflay ealpartray"

#: src/compiler/sparc/float.lisp
msgid "complex double float imagpart"
msgstr "omplexcay oubleday oatflay imagpartway"

#: src/compiler/sparc/float.lisp
msgid "complex long float realpart"
msgstr "omplexcay onglay oatflay ealpartray"

#: src/compiler/sparc/float.lisp
msgid "complex long float imagpart"
msgstr "omplexcay onglay oatflay imagpartway"

#: src/compiler/sparc/float.lisp
msgid "inline complex float arithmetic"
msgstr "inlineway omplexcay oatflay arithmeticway"

#: src/compiler/sparc/float.lisp
msgid "inline complex float/float arithmetic"
msgstr "inlineway omplexcay oatflay/oatflay arithmeticway"

#: src/compiler/sparc/float.lisp
msgid "inline complex float multiplication"
msgstr "inlineway omplexcay oatflay ultiplicationmay"

#: src/compiler/sparc/float.lisp
msgid "inline complex float division"
msgstr "inlineway omplexcay oatflay ivisionday"

#: src/compiler/sparc/float.lisp
msgid "inline complex conjugate"
msgstr "inlineway omplexcay onjugatecay"

#: src/compiler/sparc/float.lisp
msgid "inline complex float/float comparison"
msgstr "inlineway omplexcay oatflay/oatflay omparisoncay"

#: src/compiler/sparc/float.lisp
msgid "inline complex float comparison"
msgstr "inlineway omplexcay oatflay omparisoncay"

#: src/compiler/sparc/float.lisp
msgid "inline float max"
msgstr "inlineway oatflay axmay"

#: src/compiler/sparc/float.lisp
msgid "inline float min"
msgstr "inlineway oatflay inmay"

#: src/compiler/sparc/float.lisp
msgid "inline (signed-byte 32) max"
msgstr "inlineway (ignedsay-ytebay 32) axmay"

#: src/compiler/sparc/float.lisp
msgid "inline (unsigned-byte 32) max"
msgstr "inlineway (unsignedway-ytebay 32) axmay"

#: src/compiler/sparc/float.lisp
msgid "inline fixnum max"
msgstr "inlineway ixnumfay axmay"

#: src/compiler/sparc/float.lisp
msgid "inline (signed-byte 32) min"
msgstr "inlineway (ignedsay-ytebay 32) inmay"

#: src/compiler/sparc/float.lisp
msgid "inline (unsigned-byte 32) min"
msgstr "inlineway (unsignedway-ytebay 32) inmay"

#: src/compiler/sparc/float.lisp
msgid "inline fixnum min"
msgstr "inlineway ixnumfay inmay"

#: src/compiler/sparc/float.lisp
msgid "inline float max/min"
msgstr "inlineway oatflay axmay/inmay"

#: src/compiler/sparc/float.lisp
msgid "double-double float move"
msgstr "oubleday-oubleday oatflay ovemay"

#: src/compiler/sparc/float.lisp
msgid "double-double float to pointer coercion"
msgstr "oubleday-oubleday oatflay otay ointerpay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "pointer to double-double float coercion"
msgstr "ointerpay otay oubleday-oubleday oatflay oercioncay"

#: src/compiler/sparc/float.lisp
msgid "double-double float argument move"
msgstr "oubleday-oubleday oatflay argumentway ovemay"

#: src/compiler/sparc/float.lisp
msgid "inline double-double float creation"
msgstr "inlineway oubleday-oubleday oatflay eationcray"

#: src/compiler/sparc/float.lisp
msgid "double-double high part"
msgstr "oubleday-oubleday ighhay artpay"

#: src/compiler/sparc/float.lisp
msgid "double-double low part"
msgstr "oubleday-oubleday owlay artpay"

#: src/compiler/sparc/float.lisp
msgid "inline complex double-double float creation"
msgstr "inlineway omplexcay oubleday-oubleday oatflay eationcray"

#: src/compiler/sparc/float.lisp
msgid "complex double-double float realpart"
msgstr "omplexcay oubleday-oubleday oatflay ealpartray"

#: src/compiler/sparc/float.lisp
msgid "complex double-double float imagpart"
msgstr "omplexcay oubleday-oubleday oatflay imagpartway"

#: src/compiler/sparc/sap.lisp
msgid "pointer to SAP coercion"
msgstr "ointerpay otay SAP oercioncay"

#: src/compiler/sparc/sap.lisp
msgid "SAP to pointer coercion"
msgstr "SAP otay ointerpay oercioncay"

#: src/compiler/sparc/sap.lisp
msgid "SAP move"
msgstr "SAP ovemay"

#: src/compiler/sparc/sap.lisp
msgid "SAP argument move"
msgstr "SAP argumentway ovemay"

#: src/compiler/sparc/system.lisp
msgid ""
"Read the instruction cycle counter available on UltraSparcs.  The\n"
"64-bit counter is returned as two 32-bit unsigned integers.  The low 32-bit\n"
"result is the first value."
msgstr ""
"Eadray ethay instructionway yclecay ountercay availableway onway "
"Ultrasparcsway.  Ethay\n"
"64-itbay ountercay isway eturnedray asway wotay 32-itbay unsignedway "
"integersway.  Ethay owlay 32-itbay\n"
"esultray isway ethay irstfay aluevay."

#: src/compiler/sparc/system.lisp
msgid ""
"Returns the primary value of BODY as the primary value, and the\n"
" number of CPU cycles elapsed as secondary value."
msgstr ""
"Eturnsray ethay imarypray aluevay ofway BODY asway ethay imarypray aluevay, "
"andway ethay\n"
" umbernay ofway CPU yclescay elapsedway asway econdarysay aluevay."

#: src/compiler/sparc/char.lisp
msgid "character untagging"
msgstr "aracterchay untaggingway"

#: src/compiler/sparc/char.lisp
msgid "character tagging"
msgstr "aracterchay aggingtay"

#: src/compiler/sparc/char.lisp
msgid "character move"
msgstr "aracterchay ovemay"

#: src/compiler/sparc/char.lisp
msgid "character arg move"
msgstr "aracterchay argway ovemay"

#: src/compiler/sparc/char.lisp
msgid "inline comparison"
msgstr "inlineway omparisoncay"

#: src/compiler/sparc/static-fn.lisp
msgid "Either too many args (~D) or too many results (~D).  Max = ~D"
msgstr ""
"Eitherway ootay anymay argsway (~D) orway ootay anymay esultsray (~D).  "
"Axmay = ~D"

#: src/compiler/sparc/arith.lisp
msgid "inline fixnum arithmetic"
msgstr "inlineway ixnumfay arithmeticway"

#: src/compiler/sparc/arith.lisp
msgid "inline (signed-byte 32) arithmetic"
msgstr "inlineway (ignedsay-ytebay 32) arithmeticway"

#: src/compiler/sparc/arith.lisp
msgid "inline (unsigned-byte 32) arithmetic"
msgstr "inlineway (unsignedway-ytebay 32) arithmeticway"

#: src/compiler/sparc/arith.lisp
msgid "inline 32-bit abs"
msgstr "inlineway 32-itbay absway"

#: src/compiler/sparc/arith.lisp
msgid "safe inline fixnum arithmetic"
msgstr "afesay inlineway ixnumfay arithmeticway"

#: src/compiler/sparc/arith.lisp
msgid "inline (signed-byte 32) ASH"
msgstr "inlineway (ignedsay-ytebay 32) ASH"

#: src/compiler/sparc/arith.lisp
msgid "inline (unsigned-byte 32) ASH"
msgstr "inlineway (unsignedway-ytebay 32) ASH"

#: src/compiler/sparc/arith.lisp
msgid "inline constant ASH"
msgstr "inlineway onstantcay ASH"

#: src/compiler/sparc/arith.lisp
msgid "identity ASH not transformed away"
msgstr "identityway ASH otnay ansformedtray awayway"

#: src/compiler/sparc/arith.lisp
msgid "inline ASH"
msgstr "inlineway ASH"

#: src/compiler/sparc/arith.lisp
msgid "inline right ASH"
msgstr "inlineway ightray ASH"

#: src/compiler/sparc/arith.lisp
msgid "inline (signed-byte 32) integer-length"
msgstr "inlineway (ignedsay-ytebay 32) integerway-engthlay"

#: src/compiler/sparc/arith.lisp
msgid "inline (unsigned-byte 32) integer-length"
msgstr "inlineway (unsignedway-ytebay 32) integerway-engthlay"

#: src/compiler/sparc/arith.lisp
msgid "inline (unsigned-byte 32) logcount"
msgstr "inlineway (unsignedway-ytebay 32) ogcountlay"

#: src/compiler/sparc/arith.lisp
msgid "Bad size specified for SIGNED-BYTE type specifier: ~S."
msgstr "Adbay izesay ecifiedspay orfay SIGNED-BYTE ypetay ecifierspay: ~S."

#: src/compiler/sparc/arith.lisp
msgid "inline fixnum comparison"
msgstr "inlineway ixnumfay omparisoncay"

#: src/compiler/sparc/arith.lisp
msgid "inline (signed-byte 32) comparison"
msgstr "inlineway (ignedsay-ytebay 32) omparisoncay"

#: src/compiler/sparc/arith.lisp
msgid "inline (unsigned-byte 32) comparison"
msgstr "inlineway (unsignedway-ytebay 32) omparisoncay"

#: src/compiler/sparc/arith.lisp
msgid "shift-towards-start"
msgstr "iftshay-owardstay-tartsay"

#: src/compiler/sparc/arith.lisp
msgid "shift-towards-end"
msgstr "iftshay-owardstay-endway"

#: src/compiler/sparc/arith.lisp
msgid ""
"Emit code to multiply MULTIPLIER with MULTIPLICAND, putting the result\n"
"  in RESULT-HIGH and RESULT-LOW.  KIND is either :signed or :unsigned.\n"
"  Note: the lifetimes of MULTIPLICAND and RESULT-HIGH overlap."
msgstr ""
"Emitway odecay otay ultiplymay MULTIPLIER ithway MULTIPLICAND, uttingpay "
"ethay esultray\n"
"  inway RESULT-HIGH andway RESULT-LOW.  KIND isway eitherway :ignedsay "
"orway :unsignedway.\n"
"  Otenay: ethay ifetimeslay ofway MULTIPLICAND andway RESULT-HIGH overlapway."

#: src/compiler/sparc/arith.lisp
msgid "inline (signed-byte 64) arithmetic"
msgstr "inlineway (ignedsay-ytebay 64) arithmeticway"

#: src/compiler/sparc/arith.lisp
msgid "inline (unsigned-byte 64) arithmetic"
msgstr "inlineway (unsignedway-ytebay 64) arithmeticway"

#: src/compiler/sparc/arith.lisp
msgid "inline (signed-byte 64) ASH"
msgstr "inlineway (ignedsay-ytebay 64) ASH"

#: src/compiler/sparc/arith.lisp
msgid "inline (signed-byte 64) comparison"
msgstr "inlineway (ignedsay-ytebay 64) omparisoncay"

#: src/compiler/sparc/arith.lisp
msgid "inline (unsigned-byte 64) comparison"
msgstr "inlineway (unsignedway-ytebay 64) omparisoncay"

#: src/compiler/sparc/c-call.lisp
msgid "Class not yet defined: ~S"
msgstr "Assclay otnay etyay efinedday: ~S"

#: src/compiler/sparc/c-call.lisp
msgid "Too many result values from c-call."
msgstr "Ootay anymay esultray aluesvay omfray c-allcay."

#: src/compiler/sparc/c-call.lisp
msgid "Method ~S not defined for ~S"
msgstr "Ethodmay ~S otnay efinedday orfay ~S"

#: src/compiler/sparc/c-callback.lisp
msgid ""
"Cons up a piece of code which calls call-callback with INDEX and a\n"
"pointer to the arguments."
msgstr ""
"Onscay upway away iecepay ofway odecay ichwhay allscay allcay-allbackcay "
"ithway INDEX andway away\n"
"ointerpay otay ethay argumentsway."

#: src/compiler/sparc/call.lisp
msgid "more-arg-context"
msgstr "oremay-argway-ontextcay"

#: src/compiler/sparc/array.lisp
msgid "inline array access"
msgstr "inlineway arrayway accessway"

#: src/compiler/sparc/array.lisp
msgid "inline array store"
msgstr "inlineway arrayway toresay"

#: src/compiler/sparc/array.lisp
msgid "raw-bits VOP"
msgstr "awray-itsbay VOP"

#: src/compiler/sparc/array.lisp
msgid "setf raw-bits VOP"
msgstr "etfsay awray-itsbay VOP"
