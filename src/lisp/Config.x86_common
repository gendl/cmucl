# -*- Mode: makefile -*-

CPP_DEFINE_OPTIONS := -Di386

# Enable support for :linkage-table feature.
ifdef FEATURE_LINKAGE_TABLE
CPP_DEFINE_OPTIONS += -DLINKAGE_TABLE
endif

# Enable support for generational GC
ifdef FEATURE_GENCGC
CPP_DEFINE_OPTIONS += -DGENCGC
GC_SRC := gencgc.c
else
GC_SRC := cgc.c
CPP_DEFINE_OPTIONS += -DWANT_CGC
endif

# Enable support for SSE2.  If FEATURE_X87 is set, we want SSE2
# support in the C code too so that the same binary is built in both
# cases.  If neither is set, then we don't want any SSE2 support at
# all.
ifdef FEATURE_X87
CPP_DEFINE_OPTIONS += -DFEATURE_SSE2
else
ifdef FEATURE_SSE2
CPP_DEFINE_OPTIONS += -DFEATURE_SSE2
endif
endif

ifdef FEATURE_UNICODE
CPP_DEFINE_OPTIONS += -DUNICODE
endif

ifdef FEATURE_ELF
CPP_DEFINE_OPTIONS += -DFEATURE_ELF
endif

# If core-math feature is set, we use core-math routines for the
# special functions.

ifdef FEATURE_CORE_MATH
CORE_MATH_64=core-math/src/binary64

CORE64_OBJS=\
	$(CORE_MATH_64)/sin/sin.o \
	$(CORE_MATH_64)/cos/cos.o \
	$(CORE_MATH_64)/tan/tan.o \
	$(CORE_MATH_64)/atan2/atan2.o \
	$(CORE_MATH_64)/asin/asin.o \
	$(CORE_MATH_64)/acos/acos.o \
	$(CORE_MATH_64)/atan/atan.o \
	$(CORE_MATH_64)/sinh/sinh.o \
	$(CORE_MATH_64)/cosh/cosh.o \
	$(CORE_MATH_64)/tanh/tanh.o \
	$(CORE_MATH_64)/asinh/asinh.o \
	$(CORE_MATH_64)/acosh/acosh.o \
	$(CORE_MATH_64)/atanh/atanh.o \
	$(CORE_MATH_64)/exp/exp.o \
	$(CORE_MATH_64)/log/log.o \
	$(CORE_MATH_64)/log10/log10.o \
	$(CORE_MATH_64)/log2/log2.o \
	$(CORE_MATH_64)/pow/pow.o \
	$(CORE_MATH_64)/hypot/hypot.o \
	$(CORE_MATH_64)/log1p/log1p.o \
	$(CORE_MATH_64)/expm1/expm1.o \
	$(CORE_MATH_64)/sincos/sincos.o

CORE_MATH_32=core-math/src/binary32
CORE32_OBJS=\
	$(CORE_MATH_32)/sin/sinf.o \
	$(CORE_MATH_32)/cos/cosf.o \
	$(CORE_MATH_32)/tan/tanf.o \
	$(CORE_MATH_32)/atan2/atan2f.o \
	$(CORE_MATH_32)/asin/asinf.o \
	$(CORE_MATH_32)/acos/acosf.o \
	$(CORE_MATH_32)/atan/atanf.o \
	$(CORE_MATH_32)/sinh/sinhf.o \
	$(CORE_MATH_32)/cosh/coshf.o \
	$(CORE_MATH_32)/tanh/tanhf.o \
	$(CORE_MATH_32)/asinh/asinhf.o \
	$(CORE_MATH_32)/acosh/acoshf.o \
	$(CORE_MATH_32)/atanh/atanhf.o \
	$(CORE_MATH_32)/exp/expf.o \
	$(CORE_MATH_32)/log/logf.o \
	$(CORE_MATH_32)/log10/log10f.o \
	$(CORE_MATH_32)/log2/log2f.o \
	$(CORE_MATH_32)/pow/powf.o \
	$(CORE_MATH_32)/hypot/hypotf.o \
	$(CORE_MATH_32)/log1p/log1pf.o \
	$(CORE_MATH_32)/expm1/expm1f.o \
	$(CORE_MATH_32)/sincos/sincosf.o

CORE_MATH_OBJS = $(CORE64_OBJS) $(CORE32_OBJS)

endif

ifeq ($(filter 2% 3%, $(shell $(CC) -dumpversion)),)
CPP_INCLUDE_OPTIONS := -iquote . -iquote $(PATH1)
else
CPP_INCLUDE_OPTIONS := -I. -I$(PATH1) -I-
endif

CPPFLAGS := $(CPP_DEFINE_OPTIONS) $(CPP_INCLUDE_OPTIONS) 
CFLAGS += -Wstrict-prototypes -Wall -g -fno-omit-frame-pointer

# Default optimization level.  This can be changed in the individual
# configs.
COPT = -O2

ASFLAGS = -g

ASSEM_SRC = x86-assem.S
ARCH_SRC = x86-arch.c
OS_SRC = os-common.c

NM = nm -gp
DEPEND_FLAGS = -MM
