(in-package #:sacla-lisp-unit)
(define-test sacla-must-symbol.1 (:tag :sacla)
 (assert-true (symbolp 'elephant)))
(define-test sacla-must-symbol.2 (:tag :sacla) (assert-true (not (symbolp 12))))
(define-test sacla-must-symbol.3 (:tag :sacla) (assert-true (symbolp nil)))
(define-test sacla-must-symbol.4 (:tag :sacla) (assert-true (symbolp 'nil)))
(define-test sacla-must-symbol.5 (:tag :sacla) (assert-true (symbolp :test)))
(define-test sacla-must-symbol.6 (:tag :sacla)
 (assert-true (not (symbolp "hello"))))
(define-test sacla-must-symbol.7 (:tag :sacla)
 (assert-true (not (keywordp 'elephant))))
(define-test sacla-must-symbol.8 (:tag :sacla)
 (assert-true (not (keywordp 12))))
(define-test sacla-must-symbol.9 (:tag :sacla) (assert-true (keywordp :test)))
(define-test sacla-must-symbol.10 (:tag :sacla) (assert-true (keywordp ':test)))
(define-test sacla-must-symbol.11 (:tag :sacla)
 (assert-true (not (keywordp nil))))
(define-test sacla-must-symbol.12 (:tag :sacla) (assert-true (keywordp :nil)))
(define-test sacla-must-symbol.13 (:tag :sacla)
 (assert-true (not (keywordp '(:test)))))
(define-test sacla-must-symbol.14 (:tag :sacla)
 (assert-true (not (keywordp "hello"))))
(define-test sacla-must-symbol.15 (:tag :sacla)
 (assert-true (not (keywordp ":hello"))))
(define-test sacla-must-symbol.16 (:tag :sacla)
 (assert-true (not (keywordp '&optional))))
(define-test sacla-must-symbol.17 (:tag :sacla)
 (assert-true
  (let ((new (make-symbol "symbol")))
    (string= (symbol-name new) "symbol"))))
(define-test sacla-must-symbol.18 (:tag :sacla)
 (assert-true
  (let ((new (make-symbol "symbol")))
    (not (boundp new)))))
(define-test sacla-must-symbol.19 (:tag :sacla)
 (assert-true
  (let ((new (make-symbol "symbol")))
    (not (fboundp new)))))
(define-test sacla-must-symbol.20 (:tag :sacla)
 (assert-true
  (let ((new (make-symbol "symbol")))
    (null (symbol-plist new)))))
(define-test sacla-must-symbol.21 (:tag :sacla)
 (assert-true
  (let ((new (make-symbol "symbol")))
    (null (symbol-package new)))))
(define-test sacla-must-symbol.22 (:tag :sacla)
 (assert-true
  (let ((new (make-symbol "symbol")))
    (not (member new (find-all-symbols "symbol"))))))
(define-test sacla-must-symbol.23 (:tag :sacla)
 (assert-true
  (every #'identity
         (mapcar
          #'(lambda (name)
              (let ((new (make-symbol name)))
                (and (string= (symbol-name new) name)
                     (not (boundp new))
                     (not (fboundp new))
                     (null (symbol-plist new))
                     (not (member new (find-all-symbols name))))))
          '("" "Symbol" "eat-this" "SYMBOL" ":S:Y:M:B:O:L:")))))
(define-test sacla-must-symbol.24 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car)))
    (string= (symbol-name copy) (symbol-name 'car)))))
(define-test sacla-must-symbol.25 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car)))
    (not (boundp copy)))))
(define-test sacla-must-symbol.26 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car)))
    (not (fboundp copy)))))
(define-test sacla-must-symbol.27 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car)))
    (null (symbol-plist copy)))))
(define-test sacla-must-symbol.28 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car)))
    (null (symbol-package copy)))))
(define-test sacla-must-symbol.29 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car "copy properties too")))
    (string= (symbol-name copy) (symbol-name 'car)))))
(define-test sacla-must-symbol.30 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car "copy properties too")))
    (if (boundp 'car) (boundp copy) (not (boundp copy))))))
(define-test sacla-must-symbol.31 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car "copy properties too")))
    (eq (symbol-function copy) (symbol-function 'car)))))
(define-test sacla-must-symbol.32 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car "copy properties too")))
    (equal (symbol-plist copy) (symbol-plist 'car)))))
(define-test sacla-must-symbol.33 (:tag :sacla)
 (assert-true
  (let ((copy (copy-symbol 'car "copy properties too")))
    (null (symbol-package copy)))))
(define-test sacla-must-symbol.34 (:tag :sacla)
 (assert-true
  (every #'identity
         (mapcar
          #'(lambda (symbol)
              (let ((copy1 (copy-symbol symbol))
                    (copy2 (copy-symbol symbol "copy-properties")))
                (and (string= (symbol-name copy1) (symbol-name symbol))
                     (string= (symbol-name copy2) (symbol-name symbol))
                     (not (boundp copy1))
                     (if (boundp symbol) (boundp copy2) (not (boundp copy2)))
                     (not (fboundp copy1))
                     (if (fboundp symbol)
                         (fboundp copy2)
                         (not (fboundp copy2)))
                     (null (symbol-plist copy1))
                     (equal (symbol-plist copy2) (symbol-plist symbol))
                     (null (symbol-package copy1))
                     (null (symbol-package copy2))
                     (not (member copy1 (find-all-symbols symbol)))
                     (not (member copy2 (find-all-symbols symbol))))))
          '(nil cdr *package* list symbol weird-symbol)))))
(define-test sacla-must-symbol.35 (:tag :sacla)
 (assert-true
  (let ((new (gensym)))
    (not (boundp new)))))
(define-test sacla-must-symbol.36 (:tag :sacla)
 (assert-true
  (let ((new (gensym)))
    (not (fboundp new)))))
(define-test sacla-must-symbol.37 (:tag :sacla)
 (assert-true
  (let ((new (gensym)))
    (null (symbol-plist new)))))
(define-test sacla-must-symbol.38 (:tag :sacla)
 (assert-true
  (let ((new (gensym)))
    (null (symbol-package new)))))
(define-test sacla-must-symbol.39 (:tag :sacla)
 (assert-true
  (let ((new (gensym "How about this")))
    (not (boundp new)))))
(define-test sacla-must-symbol.40 (:tag :sacla)
 (assert-true
  (let ((new (gensym "How about this")))
    (not (fboundp new)))))
(define-test sacla-must-symbol.41 (:tag :sacla)
 (assert-true
  (let ((new (gensym "How about this")))
    (null (symbol-plist new)))))
(define-test sacla-must-symbol.42 (:tag :sacla)
 (assert-true
  (let ((new (gensym "How about this")))
    (null (symbol-package new)))))
(define-test sacla-must-symbol.43 (:tag :sacla)
 (assert-true
  (let ((new (gensym 100)))
    (not (boundp new)))))
(define-test sacla-must-symbol.44 (:tag :sacla)
 (assert-true
  (let ((new (gensym 10)))
    (not (fboundp new)))))
(define-test sacla-must-symbol.45 (:tag :sacla)
 (assert-true
  (let ((new (gensym 9)))
    (null (symbol-plist new)))))
(define-test sacla-must-symbol.46 (:tag :sacla)
 (assert-true
  (let ((new (gensym 8)))
    (null (symbol-package new)))))
(define-test sacla-must-symbol.47 (:tag :sacla)
 (assert-true
  (let* ((counter *gensym-counter*) (new (gensym)))
    (string= (symbol-name new)
             (with-output-to-string (stream)
               (format stream "G~D" counter))))))
(define-test sacla-must-symbol.48 (:tag :sacla)
 (assert-true
  (let* ((counter *gensym-counter*) (new (gensym "JJ")))
    (string= (symbol-name new)
             (with-output-to-string (stream)
               (format stream "JJ~D" counter))))))
(define-test sacla-must-symbol.49 (:tag :sacla)
 (assert-true
  (let* ((counter *gensym-counter*) (new (gensym "")))
    (string= (symbol-name new)
             (with-output-to-string (stream)
               (format stream "~D" counter))))))
(define-test sacla-must-symbol.50 (:tag :sacla)
 (assert-true
  (let ((new (gensym 0)))
    (string= (symbol-name new) "G0"))))
(define-test sacla-must-symbol.51 (:tag :sacla)
 (assert-true
  (let ((new (gensym 1000)))
    (string= (symbol-name new) "G1000"))))
(define-test sacla-must-symbol.52 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp)))
    (char= (aref (symbol-name symbol) 0) #\T))))
(define-test sacla-must-symbol.53 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp)))
    (not (boundp symbol)))))
(define-test sacla-must-symbol.54 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp)))
    (not (fboundp symbol)))))
(define-test sacla-must-symbol.55 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp)))
    (null (symbol-plist symbol)))))
(define-test sacla-must-symbol.56 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp)))
    (multiple-value-bind (symbol-found status)
        (find-symbol (symbol-name symbol))
      (and (eq symbol-found symbol)
           (if (eq *package* (find-package "KEYWORD"))
               (eq status :external)
               (eq status :internal)))))))
(define-test sacla-must-symbol.57 (:tag :sacla)
 (assert-true
  (let ((symbol-1 (gentemp)) (symbol-2 (gentemp)))
    (not (string= (symbol-name symbol-1) (symbol-name symbol-2))))))
(define-test sacla-must-symbol.58 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp "prefix")))
    (string= (subseq (symbol-name symbol) 0 6) "prefix"))))
(define-test sacla-must-symbol.59 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp "prefix")))
    (not (boundp symbol)))))
(define-test sacla-must-symbol.60 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp "prefix")))
    (not (fboundp symbol)))))
(define-test sacla-must-symbol.61 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp "prefix")))
    (null (symbol-plist symbol)))))
(define-test sacla-must-symbol.62 (:tag :sacla)
 (assert-true
  (let ((symbol (gentemp "prefix")))
    (multiple-value-bind (symbol-found status)
        (find-symbol (symbol-name symbol))
      (and (eq symbol-found symbol)
           (if (eq *package* (find-package "KEYWORD"))
               (eq status :external)
               (eq status :internal)))))))
(define-test sacla-must-symbol.63 (:tag :sacla)
 (assert-true
  (let* ((package (defpackage "TEST-PACKAGE-FOR-GENTEMP"))
         (symbol (gentemp "prefix" package)))
    (string= (subseq (symbol-name symbol) 0 6) "prefix"))))
(define-test sacla-must-symbol.64 (:tag :sacla)
 (assert-true
  (let* ((package (defpackage "TEST-PACKAGE-FOR-GENTEMP"))
         (symbol (gentemp "prefix" package)))
    (not (boundp symbol)))))
(define-test sacla-must-symbol.65 (:tag :sacla)
 (assert-true
  (let* ((package (defpackage "TEST-PACKAGE-FOR-GENTEMP"))
         (symbol (gentemp "prefix" package)))
    (not (fboundp symbol)))))
(define-test sacla-must-symbol.66 (:tag :sacla)
 (assert-true
  (let* ((package (defpackage "TEST-PACKAGE-FOR-GENTEMP"))
         (symbol (gentemp "prefix" package)))
    (null (symbol-plist symbol)))))
(define-test sacla-must-symbol.67 (:tag :sacla)
 (assert-true
  (let* ((package (defpackage "TEST-PACKAGE-FOR-GENTEMP"))
         (symbol (gentemp "prefix" package)))
    (multiple-value-bind (symbol-found status)
        (find-symbol (symbol-name symbol) package)
      (and (eq symbol-found symbol) (eq status :internal))))))
(define-test sacla-must-symbol.68 (:tag :sacla)
 (assert-true (functionp (symbol-function 'car))))
(define-test sacla-must-symbol.69 (:tag :sacla)
 (assert-true (eq (symbol-function 'car) (fdefinition 'car))))
(define-test sacla-must-symbol.70 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-function 'symbol-for-test) #'car)
    (eq (symbol-for-test '(a)) 'a))))
(define-test sacla-must-symbol.71 (:tag :sacla)
 (assert-true
  (let ((f #'(lambda (a) a)))
    (setf (symbol-function 'symbol-for-test) f)
    (eq (symbol-function 'symbol-for-test) f))))
(define-test sacla-must-symbol.72 (:tag :sacla)
 (assert-true (stringp (symbol-name 'symbol))))
(define-test sacla-must-symbol.73 (:tag :sacla)
 (assert-true (string= (symbol-name (intern "TEST-SYMBOL")) "TEST-SYMBOL")))
(define-test sacla-must-symbol.74 (:tag :sacla)
 (assert-true (eq (symbol-package 'car) (find-package "COMMON-LISP"))))
(define-test sacla-must-symbol.75 (:tag :sacla)
 (assert-true (eq (symbol-package ':key) (find-package "KEYWORD"))))
(define-test sacla-must-symbol.76 (:tag :sacla)
 (assert-true (null (symbol-package (make-symbol "temp")))))
(define-test sacla-must-symbol.77 (:tag :sacla)
 (assert-true (null (symbol-package (gensym)))))
(define-test sacla-must-symbol.78 (:tag :sacla)
 (assert-true (packagep (symbol-package 'a))))
(define-test sacla-must-symbol.79 (:tag :sacla)
 (assert-true (packagep (symbol-package 'my-symbol))))
(define-test sacla-must-symbol.80 (:tag :sacla)
 (assert-true (listp (symbol-plist 'car))))
(define-test sacla-must-symbol.81 (:tag :sacla)
 (assert-true (listp (symbol-plist 'cdr))))
(define-test sacla-must-symbol.82 (:tag :sacla)
 (assert-true (null (symbol-plist (gensym)))))
(define-test sacla-must-symbol.83 (:tag :sacla)
 (assert-true (null (symbol-plist (gentemp)))))
(define-test sacla-must-symbol.84 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3))
    (equal (symbol-plist symbol) '(a 1 b 2 c 3)))))
(define-test sacla-must-symbol.85 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3))
    (setf (symbol-plist symbol) 'nil)
    (null (symbol-plist symbol)))))
(define-test sacla-must-symbol.86 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-value 'a) 1)
    (eql (symbol-value 'a) 1))))
(define-test sacla-must-symbol.87 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-value 'a) 1)
    (let ((a 2))
      (eql (symbol-value 'a) 1)))))
(define-test sacla-must-symbol.88 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-value 'a) 1)
    (let ((a 2))
      (setq a 3)
      (eql (symbol-value 'a) 1)))))
(define-test sacla-must-symbol.89 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-value 'a) 1)
    (let ((a 2))
      (declare (special a))
      (eql (symbol-value 'a) 2)))))
(define-test sacla-must-symbol.90 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-value 'a) 1)
    (let ((a 2))
      (declare (special a))
      (setq a 3)
      (eql (symbol-value 'a) 3)))))
(define-test sacla-must-symbol.91 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-value 'a) 1)
    (and
     (eql
      (let ((a 2))
        (setf (symbol-value 'a) 3)
        a)
      2)
     (eql a 3)))))
(define-test sacla-must-symbol.92 (:tag :sacla)
 (assert-true
  (progn
    (setf (symbol-value 'a) 1)
    (let ((a 4))
      (declare (special a))
      (let ((b (symbol-value 'a)))
        (setf (symbol-value 'a) 5)
        (and (eql a 5) (eql b 4)))))))
(define-test sacla-must-symbol.93 (:tag :sacla)
 (assert-true (eq (symbol-value :any-keyword) :any-keyword)))
(define-test sacla-must-symbol.94 (:tag :sacla)
 (assert-true (eq (symbol-value 'nil) nil)))
(define-test sacla-must-symbol.95 (:tag :sacla)
 (assert-true (eq (symbol-value 'nil) nil)))
(define-test sacla-must-symbol.96 (:tag :sacla)
 (assert-true (eq (symbol-value t) t)))
(define-test sacla-must-symbol.97 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3))
    (and (eql (get symbol 'a) 1)
         (eql (get symbol 'b) 2)
         (eql (get symbol 'c) 3)
         (eql (get symbol 'd) nil)
         (eql (get symbol 'e 9) 9)))))
(define-test sacla-must-symbol.98 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3))
    (and (eql (setf (get symbol 'a) 9) 9)
         (eql (get symbol 'a) 9)
         (eql (setf (get symbol 'b) 8) 8)
         (eql (get symbol 'b) 8)
         (eql (setf (get symbol 'c) 7) 7)
         (eql (get symbol 'c) 7)
         (eql (setf (get symbol 'd) 6) 6)
         (eql (get symbol 'd) 6)
         (eql (setf (get symbol 'e) 5) 5)
         (eql (get symbol 'e) 5)))))
(define-test sacla-must-symbol.99 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)) tmp)
    (and (null (get symbol 'a))
         (setf (get symbol 'a (setq tmp 1)) tmp)
         (eql (get symbol 'a) 1)))))
(define-test sacla-must-symbol.100 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3 'a 9))
    (and (eql (setf (get symbol 'a) 5) 5) (eql (get symbol 'a) 5)))))
(define-test sacla-must-symbol.101 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3))
    (and (remprop symbol 'a) (eq (get symbol 'a 'not-found) 'not-found)))))
(define-test sacla-must-symbol.102 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (not (remprop symbol 'a)))))
(define-test sacla-must-symbol.103 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3 'a 9))
    (and (remprop symbol 'a) (eql (get symbol 'a) 9)))))
(define-test sacla-must-symbol.104 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (setf (symbol-plist symbol) (list 'a 1 'b 2 'c 3 'a 9))
    (and (remprop symbol 'a)
         (eql (get symbol 'a) 9)
         (remprop symbol 'a)
         (eq (get symbol 'a 'not-found) 'not-found)))))
(define-test sacla-must-symbol.105 (:tag :sacla)
 (assert-true (not (boundp (gensym)))))
(define-test sacla-must-symbol.106 (:tag :sacla)
 (assert-true
  (let ((symbol (gensym)))
    (set symbol 1)
    (boundp symbol))))
(define-test sacla-must-symbol.107 (:tag :sacla)
 (assert-true
  (let ((test-symbol 1))
    (not (boundp 'test-symbol)))))
(define-test sacla-must-symbol.108 (:tag :sacla)
 (assert-true
  (let ((test-symbol 1))
    (declare (special test-symbol))
    (boundp 'test-symbol))))
(define-test sacla-must-symbol.109 (:tag :sacla)
 (assert-true (not (boundp (makunbound (gensym))))))
(define-test sacla-must-symbol.110 (:tag :sacla)
 (assert-true
  (let ((test-symbol 0))
    (declare (special test-symbol))
    (and
     (let ((test-symbol 1))
       (declare (special test-symbol))
       (not (boundp (makunbound 'test-symbol))))
     (boundp 'test-symbol)))))
(define-test sacla-must-symbol.111 (:tag :sacla)
 (assert-true
  (let ((test-symbol 0))
    (declare (special test-symbol))
    (and
     (let ((test-symbol 1))
       (makunbound 'test-symbol)
       (eql test-symbol 1))
     (not (boundp 'test-symbol))))))
(define-test sacla-must-symbol.112 (:tag :sacla)
 (assert-true
  (let ((test-symbol 0))
    (declare (special test-symbol))
    (and (eql test-symbol 0)
         (setf (symbol-value 'test-symbol) 1)
         (eql test-symbol 1)
         (eql (set 'test-symbol 10) 10)
         (eql test-symbol 10)))))
(define-test sacla-must-symbol.113 (:tag :sacla)
 (assert-true
  (let ((test-symbol 0))
    (declare (special test-symbol))
    (and
     (let ((test-symbol 1))
       (set 'test-symbol 100)
       (eql test-symbol 1))
     (eql test-symbol 100)))))

