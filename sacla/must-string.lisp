(in-package #:sacla-lisp-unit)
(define-test sacla-must-string.1 (:tag :sacla)
 (assert-true (simple-string-p "")))
(define-test sacla-must-string.2 (:tag :sacla)
 (assert-true (simple-string-p "abc")))
(define-test sacla-must-string.3 (:tag :sacla)
 (assert-true (not (simple-string-p 'not-a-string))))
(define-test sacla-must-string.4 (:tag :sacla)
 (assert-true
  (let ((str (make-array 3 :element-type 'character :fill-pointer t)))
    (if (not (simple-vector-p str))
        (not (simple-string-p str))
        (simple-string-p str)))))
(define-test sacla-must-string.5 (:tag :sacla)
 (assert-true (char= (char "abc" 0) #\a)))
(define-test sacla-must-string.6 (:tag :sacla)
 (assert-true (char= (char "abc" 1) #\b)))
(define-test sacla-must-string.7 (:tag :sacla)
 (assert-true (char= (char "abc" 2) #\c)))
(define-test sacla-must-string.8 (:tag :sacla)
 (assert-true (char= (schar "abc" 0) #\a)))
(define-test sacla-must-string.9 (:tag :sacla)
 (assert-true (char= (schar "abc" 1) #\b)))
(define-test sacla-must-string.10 (:tag :sacla)
 (assert-true (char= (schar "abc" 2) #\c)))
(define-test sacla-must-string.11 (:tag :sacla)
 (assert-true
  (let ((str
         (make-array 10
                     :element-type 'character
                     :fill-pointer 3
                     :initial-contents "0123456789")))
    (and (string= str "012")
         (char= (char str 3) #\3)
         (char= (char str 4) #\4)
         (char= (char str 5) #\5)
         (char= (char str 6) #\6)
         (char= (char str 7) #\7)
         (char= (char str 8) #\8)
         (char= (char str 9) #\9)
         (char= (vector-pop str) #\2)))))
(define-test sacla-must-string.12 (:tag :sacla)
 (assert-true (string= (string "") "")))
(define-test sacla-must-string.13 (:tag :sacla)
 (assert-true (string= (string "abc") "abc")))
(define-test sacla-must-string.14 (:tag :sacla)
 (assert-true (string= (string "a") "a")))
(define-test sacla-must-string.15 (:tag :sacla)
 (assert-true (string= (string 'abc) "ABC")))
(define-test sacla-must-string.16 (:tag :sacla)
 (assert-true (string= (string 'a) "A")))
(define-test sacla-must-string.17 (:tag :sacla)
 (assert-true (string= (string #\a) "a")))
(define-test sacla-must-string.18 (:tag :sacla)
 (assert-true (string= (string-upcase "abcde") "ABCDE")))
(define-test sacla-must-string.19 (:tag :sacla)
 (assert-true
  (string= (string-upcase "Dr. Livingston, I presume?")
           "DR. LIVINGSTON, I PRESUME?")))
(define-test sacla-must-string.20 (:tag :sacla)
 (assert-true
  (string= (string-upcase "Dr. Livingston, I presume?" :start 6 :end 10)
           "Dr. LiVINGston, I presume?")))
(define-test sacla-must-string.21 (:tag :sacla)
 (assert-true
  (string= (string-upcase 'kludgy-hash-search) "KLUDGY-HASH-SEARCH")))
(define-test sacla-must-string.22 (:tag :sacla)
 (assert-true (string= (string-upcase "abcde" :start 2 :end nil) "abCDE")))
(define-test sacla-must-string.23 (:tag :sacla)
 (assert-true
  (string= (string-downcase "Dr. Livingston, I presume?")
           "dr. livingston, i presume?")))
(define-test sacla-must-string.24 (:tag :sacla)
 (assert-true
  (string= (string-downcase 'kludgy-hash-search) "kludgy-hash-search")))
(define-test sacla-must-string.25 (:tag :sacla)
 (assert-true (string= (string-downcase "A FOOL" :start 2 :end nil) "A fool")))
(define-test sacla-must-string.26 (:tag :sacla)
 (assert-true
  (string= (string-capitalize "elm 13c arthur;fig don't")
           "Elm 13c Arthur;Fig Don'T")))
(define-test sacla-must-string.27 (:tag :sacla)
 (assert-true (string= (string-capitalize " hello ") " Hello ")))
(define-test sacla-must-string.28 (:tag :sacla)
 (assert-true
  (string=
   (string-capitalize
    "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION")
   "Occluded Casements Forestall Inadvertent Defenestration")))
(define-test sacla-must-string.29 (:tag :sacla)
 (assert-true
  (string= (string-capitalize 'kludgy-hash-search) "Kludgy-Hash-Search")))
(define-test sacla-must-string.30 (:tag :sacla)
 (assert-true (string= (string-capitalize "DON'T!") "Don'T!")))
(define-test sacla-must-string.31 (:tag :sacla)
 (assert-true
  (string= (string-capitalize "pipe 13a, foo16c") "Pipe 13a, Foo16c")))
(define-test sacla-must-string.32 (:tag :sacla)
 (assert-true
  (string= (string-capitalize "a fool" :start 2 :end nil) "a Fool")))
(define-test sacla-must-string.33 (:tag :sacla)
 (assert-true
  (let ((str (copy-seq "0123ABCD890a")))
    (and (string= (nstring-downcase str :start 5 :end 7) "0123AbcD890a")
         (string= str "0123AbcD890a")))))
(define-test sacla-must-string.34 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "abcde")) (str (nstring-upcase str0)))
    (and (eq str0 str) (string= str "ABCDE")))))
(define-test sacla-must-string.35 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "Dr. Livingston, I presume?"))
         (str (nstring-upcase str0)))
    (and (eq str0 str) (string= str "DR. LIVINGSTON, I PRESUME?")))))
(define-test sacla-must-string.36 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "Dr. Livingston, I presume?"))
         (str (nstring-upcase str0 :start 6 :end 10)))
    (and (eq str0 str) (string= str "Dr. LiVINGston, I presume?")))))
(define-test sacla-must-string.37 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "abcde"))
         (str (nstring-upcase str0 :start 2 :end nil)))
    (string= str "abCDE"))))
(define-test sacla-must-string.38 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "Dr. Livingston, I presume?"))
         (str (nstring-downcase str0)))
    (and (eq str0 str) (string= str "dr. livingston, i presume?")))))
(define-test sacla-must-string.39 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "ABCDE"))
         (str (nstring-downcase str0 :start 2 :end nil)))
    (string= str "ABcde"))))
(define-test sacla-must-string.40 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "elm 13c arthur;fig don't"))
         (str (nstring-capitalize str0)))
    (and (eq str0 str) (string= str "Elm 13c Arthur;Fig Don'T")))))
(define-test sacla-must-string.41 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq " hello ")) (str (nstring-capitalize str0)))
    (and (eq str0 str) (string= str " Hello ")))))
(define-test sacla-must-string.42 (:tag :sacla)
 (assert-true
  (let* ((str0
          (copy-seq "occlUDeD cASEmenTs FOreSTAll iNADVertent DEFenestraTION"))
         (str (nstring-capitalize str0)))
    (and (eq str0 str)
         (string= str
                  "Occluded Casements Forestall Inadvertent Defenestration")))))
(define-test sacla-must-string.43 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "DON'T!")) (str (nstring-capitalize str0)))
    (and (eq str0 str) (string= str "Don'T!")))))
(define-test sacla-must-string.44 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "pipe 13a, foo16c")) (str (nstring-capitalize str0)))
    (and (eq str0 str) (string= str "Pipe 13a, Foo16c")))))
(define-test sacla-must-string.45 (:tag :sacla)
 (assert-true
  (let* ((str0 (copy-seq "a fool"))
         (str (nstring-capitalize str0 :start 2 :end nil)))
    (string= str "a Fool"))))
(define-test sacla-must-string.46 (:tag :sacla)
 (assert-true (string= (string-trim "abc" "abcaakaaakabcaaa") "kaaak")))
(define-test sacla-must-string.47 (:tag :sacla)
 (assert-true
  (string=
   (string-trim '(#\  #\Tab #\Newline)
                " garbanzo beans
        ")
   "garbanzo beans")))
(define-test sacla-must-string.48 (:tag :sacla)
 (assert-true
  (string= (string-trim " (*)" " ( *three (silly) words* ) ")
           "three (silly) words")))
(define-test sacla-must-string.49 (:tag :sacla)
 (assert-true (string= (string-left-trim "abc" "labcabcabc") "labcabcabc")))
(define-test sacla-must-string.50 (:tag :sacla)
 (assert-true
  (string= (string-left-trim " (*)" " ( *three (silly) words* ) ")
           "three (silly) words* ) ")))
(define-test sacla-must-string.51 (:tag :sacla)
 (assert-true
  (string= (string-right-trim " (*)" " ( *three (silly) words* ) ")
           " ( *three (silly) words")))
(define-test sacla-must-string.52 (:tag :sacla)
 (assert-true (string= (string-trim "ABC" "abc") "abc")))
(define-test sacla-must-string.53 (:tag :sacla)
 (assert-true (string= (string-trim "AABBCC" "abc") "abc")))
(define-test sacla-must-string.54 (:tag :sacla)
 (assert-true (string= (string-trim "" "abc") "abc")))
(define-test sacla-must-string.55 (:tag :sacla)
 (assert-true (string= (string-trim "ABC" "") "")))
(define-test sacla-must-string.56 (:tag :sacla)
 (assert-true (string= (string-trim "cba" "abc") "")))
(define-test sacla-must-string.57 (:tag :sacla)
 (assert-true (string= (string-trim "cba" "abccba") "")))
(define-test sacla-must-string.58 (:tag :sacla)
 (assert-true (string= (string-trim "ccbbba" "abccba") "")))
(define-test sacla-must-string.59 (:tag :sacla)
 (assert-true (string= (string-trim "cba" "abcxabc") "x")))
(define-test sacla-must-string.60 (:tag :sacla)
 (assert-true (string= (string-trim "xyz" "xxyabcxyyz") "abc")))
(define-test sacla-must-string.61 (:tag :sacla)
 (assert-true (string= (string-trim "CBA" 'abcxabc) "X")))
(define-test sacla-must-string.62 (:tag :sacla)
 (assert-true (string= (string-trim "a" #\a) "")))
(define-test sacla-must-string.63 (:tag :sacla)
 (assert-true (string= (string-left-trim "ABC" "abc") "abc")))
(define-test sacla-must-string.64 (:tag :sacla)
 (assert-true (string= (string-left-trim "" "abc") "abc")))
(define-test sacla-must-string.65 (:tag :sacla)
 (assert-true (string= (string-left-trim "ABC" "") "")))
(define-test sacla-must-string.66 (:tag :sacla)
 (assert-true (string= (string-left-trim "cba" "abc") "")))
(define-test sacla-must-string.67 (:tag :sacla)
 (assert-true (string= (string-left-trim "cba" "abccba") "")))
(define-test sacla-must-string.68 (:tag :sacla)
 (assert-true (string= (string-left-trim "cba" "abcxabc") "xabc")))
(define-test sacla-must-string.69 (:tag :sacla)
 (assert-true (string= (string-left-trim "xyz" "xxyabcxyz") "abcxyz")))
(define-test sacla-must-string.70 (:tag :sacla)
 (assert-true (string= (string-left-trim "CBA" 'abcxabc) "XABC")))
(define-test sacla-must-string.71 (:tag :sacla)
 (assert-true (string= (string-left-trim "a" #\a) "")))
(define-test sacla-must-string.72 (:tag :sacla)
 (assert-true (string= (string-right-trim "ABC" "abc") "abc")))
(define-test sacla-must-string.73 (:tag :sacla)
 (assert-true (string= (string-right-trim "" "abc") "abc")))
(define-test sacla-must-string.74 (:tag :sacla)
 (assert-true (string= (string-right-trim "ABC" "") "")))
(define-test sacla-must-string.75 (:tag :sacla)
 (assert-true (string= (string-right-trim "cba" "abc") "")))
(define-test sacla-must-string.76 (:tag :sacla)
 (assert-true (string= (string-right-trim "cba" "abccba") "")))
(define-test sacla-must-string.77 (:tag :sacla)
 (assert-true (string= (string-right-trim "cba" "abcxabc") "abcx")))
(define-test sacla-must-string.78 (:tag :sacla)
 (assert-true (string= (string-right-trim "xyz" "xxyabcxyz") "xxyabc")))
(define-test sacla-must-string.79 (:tag :sacla)
 (assert-true (string= (string-right-trim "CBA" 'abcxabc) "ABCX")))
(define-test sacla-must-string.80 (:tag :sacla)
 (assert-true (string= (string-right-trim "a" #\a) "")))
(define-test sacla-must-string.81 (:tag :sacla)
 (assert-true (string= (string "already a string") "already a string")))
(define-test sacla-must-string.82 (:tag :sacla)
 (assert-true (string= (string 'elm) "ELM")))
(define-test sacla-must-string.83 (:tag :sacla)
 (assert-true (string= (string #\c) "c")))
(define-test sacla-must-string.84 (:tag :sacla)
 (assert-true (string= "foo" "foo")))
(define-test sacla-must-string.85 (:tag :sacla)
 (assert-true (not (string= "foo" "Foo"))))
(define-test sacla-must-string.86 (:tag :sacla)
 (assert-true (not (string= "foo" "bar"))))
(define-test sacla-must-string.87 (:tag :sacla)
 (assert-true (string= "together" "frog" :start1 1 :end1 3 :start2 2)))
(define-test sacla-must-string.88 (:tag :sacla)
 (assert-true (string-equal "foo" "Foo")))
(define-test sacla-must-string.89 (:tag :sacla)
 (assert-true (string= "abcd" "01234abcd9012" :start2 5 :end2 9)))
(define-test sacla-must-string.90 (:tag :sacla)
 (assert-true (eql (string< "aaaa" "aaab") 3)))
(define-test sacla-must-string.91 (:tag :sacla)
 (assert-true (eql (string>= "aaaaa" "aaaa") 4)))
(define-test sacla-must-string.92 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "Abcde" "abcdE") 5)))
(define-test sacla-must-string.93 (:tag :sacla)
 (assert-true
  (eql
   (string-lessp "012AAAA789" "01aaab6" :start1 3 :end1 7 :start2 2 :end2 6)
   6)))
(define-test sacla-must-string.94 (:tag :sacla)
 (assert-true (not (string-not-equal "AAAA" "aaaA"))))
(define-test sacla-must-string.95 (:tag :sacla) (assert-true (string= "" "")))
(define-test sacla-must-string.96 (:tag :sacla)
 (assert-true
  (string= (make-array 0 :element-type 'character)
           (make-array 0 :element-type 'base-char))))
(define-test sacla-must-string.97 (:tag :sacla)
 (assert-true (not (string= "abc" ""))))
(define-test sacla-must-string.98 (:tag :sacla)
 (assert-true (not (string= "" "abc"))))
(define-test sacla-must-string.99 (:tag :sacla)
 (assert-true (not (string= "A" "a"))))
(define-test sacla-must-string.100 (:tag :sacla)
 (assert-true (string= "abc" "xyz" :start1 3 :start2 3)))
(define-test sacla-must-string.101 (:tag :sacla)
 (assert-true (string= "abc" "xyz" :start1 1 :end1 1 :start2 0 :end2 0)))
(define-test sacla-must-string.102 (:tag :sacla)
 (assert-true (string= "axyza" "xyz" :start1 1 :end1 4)))
(define-test sacla-must-string.103 (:tag :sacla)
 (assert-true (string= "axyza" "xyz" :start1 1 :end1 4 :start2 0 :end2 nil)))
(define-test sacla-must-string.104 (:tag :sacla)
 (assert-true (string= "abxyz" "xyabz" :end1 2 :start2 2 :end2 4)))
(define-test sacla-must-string.105 (:tag :sacla)
 (assert-true (not (string= "love" "hate"))))
(define-test sacla-must-string.106 (:tag :sacla)
 (assert-true (string= 'love 'love)))
(define-test sacla-must-string.107 (:tag :sacla)
 (assert-true (not (string= 'love "hate"))))
(define-test sacla-must-string.108 (:tag :sacla)
 (assert-true (string= #\a #\a)))
(define-test sacla-must-string.109 (:tag :sacla)
 (assert-true (not (string/= "" ""))))
(define-test sacla-must-string.110 (:tag :sacla)
 (assert-true
  (not
   (string/= (make-array 0 :element-type 'character)
             (make-array 0 :element-type 'base-char)))))
(define-test sacla-must-string.111 (:tag :sacla)
 (assert-true (eql (string/= "abc" "") 0)))
(define-test sacla-must-string.112 (:tag :sacla)
 (assert-true (eql (string/= "" "abc") 0)))
(define-test sacla-must-string.113 (:tag :sacla)
 (assert-true (eql (string/= "A" "a") 0)))
(define-test sacla-must-string.114 (:tag :sacla)
 (assert-true (not (string/= "abc" "xyz" :start1 3 :start2 3))))
(define-test sacla-must-string.115 (:tag :sacla)
 (assert-true (not (string/= "abc" "xyz" :start1 1 :end1 1 :start2 0 :end2 0))))
(define-test sacla-must-string.116 (:tag :sacla)
 (assert-true (not (string/= "axyza" "xyz" :start1 1 :end1 4))))
(define-test sacla-must-string.117 (:tag :sacla)
 (assert-true
  (not (string/= "axyza" "xyz" :start1 1 :end1 4 :start2 0 :end2 nil))))
(define-test sacla-must-string.118 (:tag :sacla)
 (assert-true (not (string/= "abxyz" "xyabz" :end1 2 :start2 2 :end2 4))))
(define-test sacla-must-string.119 (:tag :sacla)
 (assert-true (eql (string/= "love" "hate") 0)))
(define-test sacla-must-string.120 (:tag :sacla)
 (assert-true (eql (string/= "love" "loVe") 2)))
(define-test sacla-must-string.121 (:tag :sacla)
 (assert-true (not (string/= "life" "death" :start1 3 :start2 1 :end2 2))))
(define-test sacla-must-string.122 (:tag :sacla)
 (assert-true (eql (string/= "abcxyz" "ABCxyZ" :start1 3 :start2 3) 5)))
(define-test sacla-must-string.123 (:tag :sacla)
 (assert-true
  (eql (string/= "abcxyz" "ABCxyZ" :start1 3 :end1 nil :start2 3 :end2 nil) 5)))
(define-test sacla-must-string.124 (:tag :sacla)
 (assert-true (eql (string/= "abcxyz" "ABCxyZ" :end1 nil :start2 3 :end2 3) 0)))
(define-test sacla-must-string.125 (:tag :sacla)
 (assert-true (eql (string/= "abc" "abcxyz") 3)))
(define-test sacla-must-string.126 (:tag :sacla)
 (assert-true (eql (string/= "abcxyz" "abc") 3)))
(define-test sacla-must-string.127 (:tag :sacla)
 (assert-true (eql (string/= "abcxyz" "") 0)))
(define-test sacla-must-string.128 (:tag :sacla)
 (assert-true (eql (string/= "AbcDef" "cdef" :start1 2) 3)))
(define-test sacla-must-string.129 (:tag :sacla)
 (assert-true (eql (string/= "cdef" "AbcDef" :start2 2) 1)))
(define-test sacla-must-string.130 (:tag :sacla)
 (assert-true (= (string/= 'love "hate") 0)))
(define-test sacla-must-string.131 (:tag :sacla)
 (assert-true (not (string/= 'love 'love))))
(define-test sacla-must-string.132 (:tag :sacla)
 (assert-true (not (string/= #\a #\a))))
(define-test sacla-must-string.133 (:tag :sacla)
 (assert-true (= (string/= #\a #\b) 0)))
(define-test sacla-must-string.134 (:tag :sacla)
 (assert-true (not (string< "" ""))))
(define-test sacla-must-string.135 (:tag :sacla)
 (assert-true (not (string< "dog" "dog"))))
(define-test sacla-must-string.136 (:tag :sacla)
 (assert-true (not (string< " " " "))))
(define-test sacla-must-string.137 (:tag :sacla)
 (assert-true (not (string< "abc" ""))))
(define-test sacla-must-string.138 (:tag :sacla)
 (assert-true (eql (string< "" "abc") 0)))
(define-test sacla-must-string.139 (:tag :sacla)
 (assert-true (eql (string< "ab" "abc") 2)))
(define-test sacla-must-string.140 (:tag :sacla)
 (assert-true (not (string< "abc" "ab"))))
(define-test sacla-must-string.141 (:tag :sacla)
 (assert-true (eql (string< "aaa" "aba") 1)))
(define-test sacla-must-string.142 (:tag :sacla)
 (assert-true (not (string< "aba" "aaa"))))
(define-test sacla-must-string.143 (:tag :sacla)
 (assert-true
  (not (string< "my cat food" "your dog food" :start1 6 :start2 8))))
(define-test sacla-must-string.144 (:tag :sacla)
 (assert-true
  (not
   (string< "cat food 2 dollars"
            "dog food 3 dollars"
            :start1 3
            :end1 9
            :start2 3
            :end2 9))))
(define-test sacla-must-string.145 (:tag :sacla)
 (assert-true (eql (string< "xyzabc" "abcd" :start1 3) 6)))
(define-test sacla-must-string.146 (:tag :sacla)
 (assert-true (eql (string< "abc" "abc" :end1 1) 1)))
(define-test sacla-must-string.147 (:tag :sacla)
 (assert-true (eql (string< "xyzabc" "abc" :start1 3 :end1 5) 5)))
(define-test sacla-must-string.148 (:tag :sacla)
 (assert-true (eql (string< "xyz" "abcxyzXYZ" :start2 3) 3)))
(define-test sacla-must-string.149 (:tag :sacla)
 (assert-true (not (string< "abc" "abcxyz" :end2 3))))
(define-test sacla-must-string.150 (:tag :sacla)
 (assert-true (eql (string< "xyz" "abcxyz" :end1 2 :start2 3) 2)))
(define-test sacla-must-string.151 (:tag :sacla)
 (assert-true (not (string< "xyzabc" "abcdef" :start1 3 :end2 3))))
(define-test sacla-must-string.152 (:tag :sacla)
 (assert-true (eql (string< "aaaa" "z") 0)))
(define-test sacla-must-string.153 (:tag :sacla)
 (assert-true (eql (string< "pppTTTaTTTqqq" "pTTTxTTT" :start1 3 :start2 1) 6)))
(define-test sacla-must-string.154 (:tag :sacla)
 (assert-true
  (eql (string< "pppTTTaTTTqqq" "pTTTxTTT" :start1 6 :end1 7 :start2 4 :end2 5)
       6)))
(define-test sacla-must-string.155 (:tag :sacla)
 (assert-true
  (not
   (string< (make-array 0 :element-type 'character)
            (make-array 0 :element-type 'base-char)))))
(define-test sacla-must-string.156 (:tag :sacla)
 (assert-true (not (string< 'love 'hate))))
(define-test sacla-must-string.157 (:tag :sacla)
 (assert-true (= (string< 'peace 'war) 0)))
(define-test sacla-must-string.158 (:tag :sacla)
 (assert-true (not (string< 'love 'love))))
(define-test sacla-must-string.159 (:tag :sacla)
 (assert-true (not (string< #\a #\a))))
(define-test sacla-must-string.160 (:tag :sacla)
 (assert-true (= (string< #\a #\b) 0)))
(define-test sacla-must-string.161 (:tag :sacla)
 (assert-true (not (string> "" ""))))
(define-test sacla-must-string.162 (:tag :sacla)
 (assert-true (not (string> "dog" "dog"))))
(define-test sacla-must-string.163 (:tag :sacla)
 (assert-true (not (string> " " " "))))
(define-test sacla-must-string.164 (:tag :sacla)
 (assert-true (eql (string> "abc" "") 0)))
(define-test sacla-must-string.165 (:tag :sacla)
 (assert-true (not (string> "" "abc"))))
(define-test sacla-must-string.166 (:tag :sacla)
 (assert-true (not (string> "ab" "abc"))))
(define-test sacla-must-string.167 (:tag :sacla)
 (assert-true (eql (string> "abc" "ab") 2)))
(define-test sacla-must-string.168 (:tag :sacla)
 (assert-true (eql (string> "aba" "aaa") 1)))
(define-test sacla-must-string.169 (:tag :sacla)
 (assert-true (not (string> "aaa" "aba"))))
(define-test sacla-must-string.170 (:tag :sacla)
 (assert-true
  (not (string> "my cat food" "your dog food" :start1 6 :start2 8))))
(define-test sacla-must-string.171 (:tag :sacla)
 (assert-true
  (not
   (string> "cat food 2 dollars"
            "dog food 3 dollars"
            :start1 3
            :end1 9
            :start2 3
            :end2 9))))
(define-test sacla-must-string.172 (:tag :sacla)
 (assert-true (eql (string> "xyzabcde" "abcd" :start1 3) 7)))
(define-test sacla-must-string.173 (:tag :sacla)
 (assert-true (not (string> "abc" "abc" :end1 1))))
(define-test sacla-must-string.174 (:tag :sacla)
 (assert-true (eql (string> "xyzabc" "a" :start1 3 :end1 5) 4)))
(define-test sacla-must-string.175 (:tag :sacla)
 (assert-true (eql (string> "xyzXYZ" "abcxyz" :start2 3) 3)))
(define-test sacla-must-string.176 (:tag :sacla)
 (assert-true (eql (string> "abcxyz" "abcxyz" :end2 3) 3)))
(define-test sacla-must-string.177 (:tag :sacla)
 (assert-true (not (string> "xyzXYZ" "abcxyz" :end1 2 :start2 3))))
(define-test sacla-must-string.178 (:tag :sacla)
 (assert-true (not (string> "xyzabc" "abcdef" :start1 3 :end2 3))))
(define-test sacla-must-string.179 (:tag :sacla)
 (assert-true (eql (string> "z" "aaaa") 0)))
(define-test sacla-must-string.180 (:tag :sacla)
 (assert-true (eql (string> "pTTTxTTTqqq" "pppTTTaTTT" :start1 1 :start2 3) 4)))
(define-test sacla-must-string.181 (:tag :sacla)
 (assert-true
  (eql (string> "pppTTTxTTTqqq" "pTTTaTTT" :start1 6 :end1 7 :start2 4 :end2 5)
       6)))
(define-test sacla-must-string.182 (:tag :sacla)
 (assert-true
  (not
   (string> (make-array 0 :element-type 'character)
            (make-array 0 :element-type 'base-char)))))
(define-test sacla-must-string.183 (:tag :sacla)
 (assert-true (= (string> 'love 'hate) 0)))
(define-test sacla-must-string.184 (:tag :sacla)
 (assert-true (not (string> 'peace 'war))))
(define-test sacla-must-string.185 (:tag :sacla)
 (assert-true (not (string> 'love 'love))))
(define-test sacla-must-string.186 (:tag :sacla)
 (assert-true (not (string> #\a #\a))))
(define-test sacla-must-string.187 (:tag :sacla)
 (assert-true (not (string> #\a #\b))))
(define-test sacla-must-string.188 (:tag :sacla)
 (assert-true (= (string> #\z #\a) 0)))
(define-test sacla-must-string.189 (:tag :sacla)
 (assert-true (eql (string<= "" "") 0)))
(define-test sacla-must-string.190 (:tag :sacla)
 (assert-true (eql (string<= "dog" "dog") 3)))
(define-test sacla-must-string.191 (:tag :sacla)
 (assert-true (eql (string<= " " " ") 1)))
(define-test sacla-must-string.192 (:tag :sacla)
 (assert-true (not (string<= "abc" ""))))
(define-test sacla-must-string.193 (:tag :sacla)
 (assert-true (eql (string<= "ab" "abc") 2)))
(define-test sacla-must-string.194 (:tag :sacla)
 (assert-true (eql (string<= "aaa" "aba") 1)))
(define-test sacla-must-string.195 (:tag :sacla)
 (assert-true (not (string<= "aba" "aaa"))))
(define-test sacla-must-string.196 (:tag :sacla)
 (assert-true
  (eql (string<= "my cat food" "your dog food" :start1 6 :start2 8) 11)))
(define-test sacla-must-string.197 (:tag :sacla)
 (assert-true
  (eql
   (string<= "cat food 2 dollars"
             "dog food 3 dollars"
             :start1 3
             :end1 9
             :start2 3
             :end2 9)
   9)))
(define-test sacla-must-string.198 (:tag :sacla)
 (assert-true (eql (string<= "xyzabc" "abcd" :start1 3) 6)))
(define-test sacla-must-string.199 (:tag :sacla)
 (assert-true (eql (string<= "abc" "abc" :end1 1) 1)))
(define-test sacla-must-string.200 (:tag :sacla)
 (assert-true (eql (string<= "xyzabc" "abc" :start1 3 :end1 5) 5)))
(define-test sacla-must-string.201 (:tag :sacla)
 (assert-true (eql (string<= "xyz" "abcxyzXYZ" :start2 3) 3)))
(define-test sacla-must-string.202 (:tag :sacla)
 (assert-true (eql (string<= "abc" "abcxyz" :end2 3) 3)))
(define-test sacla-must-string.203 (:tag :sacla)
 (assert-true (eql (string<= "xyz" "abcxyz" :end1 2 :start2 3) 2)))
(define-test sacla-must-string.204 (:tag :sacla)
 (assert-true (eql (string<= "xyzabc" "abcdef" :start1 3 :end2 3) 6)))
(define-test sacla-must-string.205 (:tag :sacla)
 (assert-true (eql (string<= "aaaa" "z") 0)))
(define-test sacla-must-string.206 (:tag :sacla)
 (assert-true
  (eql (string<= "pppTTTaTTTqqq" "pTTTxTTT" :start1 3 :start2 1) 6)))
(define-test sacla-must-string.207 (:tag :sacla)
 (assert-true
  (eql
   (string<= "pppTTTaTTTqqq" "pTTTxTTT" :start1 6 :end1 7 :start2 4 :end2 5)
   6)))
(define-test sacla-must-string.208 (:tag :sacla)
 (assert-true
  (eql
   (string<= (make-array 0 :element-type 'character)
             (make-array 0 :element-type 'base-char))
   0)))
(define-test sacla-must-string.209 (:tag :sacla)
 (assert-true (not (string<= 'love 'hate))))
(define-test sacla-must-string.210 (:tag :sacla)
 (assert-true (= (string<= 'peace 'war) 0)))
(define-test sacla-must-string.211 (:tag :sacla)
 (assert-true (= (string<= 'love 'love) 4)))
(define-test sacla-must-string.212 (:tag :sacla)
 (assert-true (= (string<= #\a #\a) 1)))
(define-test sacla-must-string.213 (:tag :sacla)
 (assert-true (= (string<= #\a #\b) 0)))
(define-test sacla-must-string.214 (:tag :sacla)
 (assert-true (not (string<= #\z #\a))))
(define-test sacla-must-string.215 (:tag :sacla)
 (assert-true (eql (string>= "" "") 0)))
(define-test sacla-must-string.216 (:tag :sacla)
 (assert-true (eql (string>= "dog" "dog") 3)))
(define-test sacla-must-string.217 (:tag :sacla)
 (assert-true (eql (string>= " " " ") 1)))
(define-test sacla-must-string.218 (:tag :sacla)
 (assert-true (eql (string>= "abc" "") 0)))
(define-test sacla-must-string.219 (:tag :sacla)
 (assert-true (not (string>= "" "abc"))))
(define-test sacla-must-string.220 (:tag :sacla)
 (assert-true (not (string>= "ab" "abc"))))
(define-test sacla-must-string.221 (:tag :sacla)
 (assert-true (eql (string>= "abc" "ab") 2)))
(define-test sacla-must-string.222 (:tag :sacla)
 (assert-true (eql (string>= "aba" "aaa") 1)))
(define-test sacla-must-string.223 (:tag :sacla)
 (assert-true (not (string>= "aaa" "aba"))))
(define-test sacla-must-string.224 (:tag :sacla)
 (assert-true
  (eql (string>= "my cat food" "your dog food" :start1 6 :start2 8) 11)))
(define-test sacla-must-string.225 (:tag :sacla)
 (assert-true
  (eql
   (string>= "cat food 2 dollars"
             "dog food 3 dollars"
             :start1 3
             :end1 9
             :start2 3
             :end2 9)
   9)))
(define-test sacla-must-string.226 (:tag :sacla)
 (assert-true (eql (string>= "xyzabcde" "abcd" :start1 3) 7)))
(define-test sacla-must-string.227 (:tag :sacla)
 (assert-true (not (string>= "abc" "abc" :end1 1))))
(define-test sacla-must-string.228 (:tag :sacla)
 (assert-true (eql (string>= "xyzabc" "a" :start1 3 :end1 5) 4)))
(define-test sacla-must-string.229 (:tag :sacla)
 (assert-true (eql (string>= "xyzXYZ" "abcxyz" :start2 3) 3)))
(define-test sacla-must-string.230 (:tag :sacla)
 (assert-true (eql (string>= "abcxyz" "abcxyz" :end2 3) 3)))
(define-test sacla-must-string.231 (:tag :sacla)
 (assert-true (not (string>= "xyzXYZ" "abcxyz" :end1 2 :start2 3))))
(define-test sacla-must-string.232 (:tag :sacla)
 (assert-true (eql (string>= "xyzabc" "abcdef" :start1 3 :end2 3) 6)))
(define-test sacla-must-string.233 (:tag :sacla)
 (assert-true (eql (string>= "z" "aaaa") 0)))
(define-test sacla-must-string.234 (:tag :sacla)
 (assert-true
  (eql (string>= "pTTTxTTTqqq" "pppTTTaTTT" :start1 1 :start2 3) 4)))
(define-test sacla-must-string.235 (:tag :sacla)
 (assert-true
  (eql
   (string>= "pppTTTxTTTqqq" "pTTTaTTT" :start1 6 :end1 7 :start2 4 :end2 5)
   6)))
(define-test sacla-must-string.236 (:tag :sacla)
 (assert-true
  (eql
   (string>= (make-array 0 :element-type 'character)
             (make-array 0 :element-type 'base-char))
   0)))
(define-test sacla-must-string.237 (:tag :sacla)
 (assert-true (= (string>= 'love 'hate) 0)))
(define-test sacla-must-string.238 (:tag :sacla)
 (assert-true (not (string>= 'peace 'war))))
(define-test sacla-must-string.239 (:tag :sacla)
 (assert-true (= (string>= 'love 'love) 4)))
(define-test sacla-must-string.240 (:tag :sacla)
 (assert-true (= (string>= #\a #\a) 1)))
(define-test sacla-must-string.241 (:tag :sacla)
 (assert-true (not (string>= #\a #\b))))
(define-test sacla-must-string.242 (:tag :sacla)
 (assert-true (= (string>= #\z #\a) 0)))
(define-test sacla-must-string.243 (:tag :sacla)
 (assert-true (string-equal "" "")))
(define-test sacla-must-string.244 (:tag :sacla)
 (assert-true
  (string-equal (make-array 0 :element-type 'character)
                (make-array 0 :element-type 'base-char))))
(define-test sacla-must-string.245 (:tag :sacla)
 (assert-true (not (string-equal "abc" ""))))
(define-test sacla-must-string.246 (:tag :sacla)
 (assert-true (not (string-equal "" "abc"))))
(define-test sacla-must-string.247 (:tag :sacla)
 (assert-true (string-equal "A" "a")))
(define-test sacla-must-string.248 (:tag :sacla)
 (assert-true (string-equal "abc" "xyz" :start1 3 :start2 3)))
(define-test sacla-must-string.249 (:tag :sacla)
 (assert-true (string-equal "abc" "xyz" :start1 1 :end1 1 :start2 0 :end2 0)))
(define-test sacla-must-string.250 (:tag :sacla)
 (assert-true (string-equal "axyza" "xyz" :start1 1 :end1 4)))
(define-test sacla-must-string.251 (:tag :sacla)
 (assert-true
  (string-equal "axyza" "xyz" :start1 1 :end1 4 :start2 0 :end2 nil)))
(define-test sacla-must-string.252 (:tag :sacla)
 (assert-true (string-equal "abxyz" "xyabz" :end1 2 :start2 2 :end2 4)))
(define-test sacla-must-string.253 (:tag :sacla)
 (assert-true (not (string-equal "love" "hate"))))
(define-test sacla-must-string.254 (:tag :sacla)
 (assert-true (string-equal "xyz" "XYZ")))
(define-test sacla-must-string.255 (:tag :sacla)
 (assert-true (not (string-equal 'love 'hate))))
(define-test sacla-must-string.256 (:tag :sacla)
 (assert-true (not (string-equal 'peace 'war))))
(define-test sacla-must-string.257 (:tag :sacla)
 (assert-true (string-equal 'love 'love)))
(define-test sacla-must-string.258 (:tag :sacla)
 (assert-true (string-equal #\a #\a)))
(define-test sacla-must-string.259 (:tag :sacla)
 (assert-true (not (string-equal #\a #\b))))
(define-test sacla-must-string.260 (:tag :sacla)
 (assert-true (not (string-equal #\z #\a))))
(define-test sacla-must-string.261 (:tag :sacla)
 (assert-true (not (string-not-equal "" ""))))
(define-test sacla-must-string.262 (:tag :sacla)
 (assert-true
  (not
   (string-not-equal (make-array 0 :element-type 'character)
                     (make-array 0 :element-type 'base-char)))))
(define-test sacla-must-string.263 (:tag :sacla)
 (assert-true (eql (string-not-equal "abc" "") 0)))
(define-test sacla-must-string.264 (:tag :sacla)
 (assert-true (eql (string-not-equal "" "abc") 0)))
(define-test sacla-must-string.265 (:tag :sacla)
 (assert-true (not (string-not-equal "A" "a"))))
(define-test sacla-must-string.266 (:tag :sacla)
 (assert-true (not (string-not-equal "abc" "xyz" :start1 3 :start2 3))))
(define-test sacla-must-string.267 (:tag :sacla)
 (assert-true
  (not (string-not-equal "abc" "xyz" :start1 1 :end1 1 :start2 0 :end2 0))))
(define-test sacla-must-string.268 (:tag :sacla)
 (assert-true (not (string-not-equal "axyza" "xyz" :start1 1 :end1 4))))
(define-test sacla-must-string.269 (:tag :sacla)
 (assert-true
  (not (string-not-equal "axyza" "xyz" :start1 1 :end1 4 :start2 0 :end2 nil))))
(define-test sacla-must-string.270 (:tag :sacla)
 (assert-true
  (not (string-not-equal "abxyz" "xyabz" :end1 2 :start2 2 :end2 4))))
(define-test sacla-must-string.271 (:tag :sacla)
 (assert-true (eql (string-not-equal "love" "hate") 0)))
(define-test sacla-must-string.272 (:tag :sacla)
 (assert-true (not (string-not-equal "love" "loVe"))))
(define-test sacla-must-string.273 (:tag :sacla)
 (assert-true
  (not (string-not-equal "life" "death" :start1 3 :start2 1 :end2 2))))
(define-test sacla-must-string.274 (:tag :sacla)
 (assert-true (not (string-not-equal "abcxyz" "ABCxyZ" :start1 3 :start2 3))))
(define-test sacla-must-string.275 (:tag :sacla)
 (assert-true
  (not
   (string-not-equal "abcxyz"
                     "ABCxyZ"
                     :start1 3
                     :end1 nil
                     :start2 3
                     :end2 nil))))
(define-test sacla-must-string.276 (:tag :sacla)
 (assert-true
  (eql (string-not-equal "abcxyz" "ABCxyZ" :end1 nil :start2 3 :end2 3) 0)))
(define-test sacla-must-string.277 (:tag :sacla)
 (assert-true (eql (string-not-equal "abc" "abcxyz") 3)))
(define-test sacla-must-string.278 (:tag :sacla)
 (assert-true (eql (string-not-equal "abcxyz" "abc") 3)))
(define-test sacla-must-string.279 (:tag :sacla)
 (assert-true (eql (string-not-equal "abcxyz" "") 0)))
(define-test sacla-must-string.280 (:tag :sacla)
 (assert-true (not (string-not-equal "AbcDef" "cdef" :start1 2))))
(define-test sacla-must-string.281 (:tag :sacla)
 (assert-true (not (string-not-equal "cdef" "AbcDef" :start2 2))))
(define-test sacla-must-string.282 (:tag :sacla)
 (assert-true (not (string-not-equal "ABC" "abc"))))
(define-test sacla-must-string.283 (:tag :sacla)
 (assert-true (= (string-not-equal 'love 'hate) 0)))
(define-test sacla-must-string.284 (:tag :sacla)
 (assert-true (= (string-not-equal 'peace 'war) 0)))
(define-test sacla-must-string.285 (:tag :sacla)
 (assert-true (not (string-not-equal 'love 'love))))
(define-test sacla-must-string.286 (:tag :sacla)
 (assert-true (not (string-not-equal #\a #\a))))
(define-test sacla-must-string.287 (:tag :sacla)
 (assert-true (= (string-not-equal #\a #\b) 0)))
(define-test sacla-must-string.288 (:tag :sacla)
 (assert-true (= (string-not-equal #\z #\a) 0)))
(define-test sacla-must-string.289 (:tag :sacla)
 (assert-true (not (string-lessp "" ""))))
(define-test sacla-must-string.290 (:tag :sacla)
 (assert-true (not (string-lessp "dog" "dog"))))
(define-test sacla-must-string.291 (:tag :sacla)
 (assert-true (not (string-lessp " " " "))))
(define-test sacla-must-string.292 (:tag :sacla)
 (assert-true (not (string-lessp "abc" ""))))
(define-test sacla-must-string.293 (:tag :sacla)
 (assert-true (eql (string-lessp "" "abc") 0)))
(define-test sacla-must-string.294 (:tag :sacla)
 (assert-true (eql (string-lessp "ab" "abc") 2)))
(define-test sacla-must-string.295 (:tag :sacla)
 (assert-true (not (string-lessp "abc" "ab"))))
(define-test sacla-must-string.296 (:tag :sacla)
 (assert-true (eql (string-lessp "aaa" "aba") 1)))
(define-test sacla-must-string.297 (:tag :sacla)
 (assert-true (not (string-lessp "aba" "aaa"))))
(define-test sacla-must-string.298 (:tag :sacla)
 (assert-true
  (not (string-lessp "my cat food" "your dog food" :start1 6 :start2 8))))
(define-test sacla-must-string.299 (:tag :sacla)
 (assert-true
  (not
   (string-lessp "cat food 2 dollars"
                 "dog food 3 dollars"
                 :start1 3
                 :end1 9
                 :start2 3
                 :end2 9))))
(define-test sacla-must-string.300 (:tag :sacla)
 (assert-true (eql (string-lessp "xyzabc" "abcd" :start1 3) 6)))
(define-test sacla-must-string.301 (:tag :sacla)
 (assert-true (eql (string-lessp "abc" "abc" :end1 1) 1)))
(define-test sacla-must-string.302 (:tag :sacla)
 (assert-true (eql (string-lessp "xyzabc" "abc" :start1 3 :end1 5) 5)))
(define-test sacla-must-string.303 (:tag :sacla)
 (assert-true (eql (string-lessp "xyz" "abcxyzXYZ" :start2 3) 3)))
(define-test sacla-must-string.304 (:tag :sacla)
 (assert-true (not (string-lessp "abc" "abcxyz" :end2 3))))
(define-test sacla-must-string.305 (:tag :sacla)
 (assert-true (eql (string-lessp "xyz" "abcxyz" :end1 2 :start2 3) 2)))
(define-test sacla-must-string.306 (:tag :sacla)
 (assert-true (not (string-lessp "xyzabc" "abcdef" :start1 3 :end2 3))))
(define-test sacla-must-string.307 (:tag :sacla)
 (assert-true (eql (string-lessp "aaaa" "z") 0)))
(define-test sacla-must-string.308 (:tag :sacla)
 (assert-true
  (eql (string-lessp "pppTTTaTTTqqq" "pTTTxTTT" :start1 3 :start2 1) 6)))
(define-test sacla-must-string.309 (:tag :sacla)
 (assert-true
  (eql
   (string-lessp "pppTTTaTTTqqq"
                 "pTTTxTTT"
                 :start1 6
                 :end1 7
                 :start2 4
                 :end2 5)
   6)))
(define-test sacla-must-string.310 (:tag :sacla)
 (assert-true
  (not
   (string-lessp (make-array 0 :element-type 'character)
                 (make-array 0 :element-type 'base-char)))))
(define-test sacla-must-string.311 (:tag :sacla)
 (assert-true
  (and (not (string-lessp "abc" "ABC")) (not (string-lessp "ABC" "abc")))))
(define-test sacla-must-string.312 (:tag :sacla)
 (assert-true (not (string-lessp 'love 'hate))))
(define-test sacla-must-string.313 (:tag :sacla)
 (assert-true (= (string-lessp 'peace 'war) 0)))
(define-test sacla-must-string.314 (:tag :sacla)
 (assert-true (not (string-lessp 'love 'love))))
(define-test sacla-must-string.315 (:tag :sacla)
 (assert-true (not (string-lessp #\a #\a))))
(define-test sacla-must-string.316 (:tag :sacla)
 (assert-true (= (string-lessp #\a #\b) 0)))
(define-test sacla-must-string.317 (:tag :sacla)
 (assert-true (not (string-lessp #\z #\a))))
(define-test sacla-must-string.318 (:tag :sacla)
 (assert-true (not (string-greaterp "" ""))))
(define-test sacla-must-string.319 (:tag :sacla)
 (assert-true (not (string-greaterp "dog" "dog"))))
(define-test sacla-must-string.320 (:tag :sacla)
 (assert-true (not (string-greaterp " " " "))))
(define-test sacla-must-string.321 (:tag :sacla)
 (assert-true (eql (string-greaterp "abc" "") 0)))
(define-test sacla-must-string.322 (:tag :sacla)
 (assert-true (not (string-greaterp "" "abc"))))
(define-test sacla-must-string.323 (:tag :sacla)
 (assert-true (not (string-greaterp "ab" "abc"))))
(define-test sacla-must-string.324 (:tag :sacla)
 (assert-true (eql (string-greaterp "abc" "ab") 2)))
(define-test sacla-must-string.325 (:tag :sacla)
 (assert-true (eql (string-greaterp "aba" "aaa") 1)))
(define-test sacla-must-string.326 (:tag :sacla)
 (assert-true (not (string-greaterp "aaa" "aba"))))
(define-test sacla-must-string.327 (:tag :sacla)
 (assert-true
  (not (string-greaterp "my cat food" "your dog food" :start1 6 :start2 8))))
(define-test sacla-must-string.328 (:tag :sacla)
 (assert-true
  (not
   (string-greaterp "cat food 2 dollars"
                    "dog food 3 dollars"
                    :start1 3
                    :end1 9
                    :start2 3
                    :end2 9))))
(define-test sacla-must-string.329 (:tag :sacla)
 (assert-true (eql (string-greaterp "xyzabcde" "abcd" :start1 3) 7)))
(define-test sacla-must-string.330 (:tag :sacla)
 (assert-true (not (string-greaterp "abc" "abc" :end1 1))))
(define-test sacla-must-string.331 (:tag :sacla)
 (assert-true (eql (string-greaterp "xyzabc" "a" :start1 3 :end1 5) 4)))
(define-test sacla-must-string.332 (:tag :sacla)
 (assert-true (eql (string-greaterp "xyzXYZ" "abcxyz" :start2 3) 3)))
(define-test sacla-must-string.333 (:tag :sacla)
 (assert-true (eql (string-greaterp "abcxyz" "abcxyz" :end2 3) 3)))
(define-test sacla-must-string.334 (:tag :sacla)
 (assert-true (not (string-greaterp "xyzXYZ" "abcxyz" :end1 2 :start2 3))))
(define-test sacla-must-string.335 (:tag :sacla)
 (assert-true (not (string-greaterp "xyzabc" "abcdef" :start1 3 :end2 3))))
(define-test sacla-must-string.336 (:tag :sacla)
 (assert-true (eql (string-greaterp "z" "aaaa") 0)))
(define-test sacla-must-string.337 (:tag :sacla)
 (assert-true
  (eql (string-greaterp "pTTTxTTTqqq" "pppTTTaTTT" :start1 1 :start2 3) 4)))
(define-test sacla-must-string.338 (:tag :sacla)
 (assert-true
  (eql
   (string-greaterp "pppTTTxTTTqqq"
                    "pTTTaTTT"
                    :start1 6
                    :end1 7
                    :start2 4
                    :end2 5)
   6)))
(define-test sacla-must-string.339 (:tag :sacla)
 (assert-true
  (not
   (string-greaterp (make-array 0 :element-type 'character)
                    (make-array 0 :element-type 'base-char)))))
(define-test sacla-must-string.340 (:tag :sacla)
 (assert-true
  (and (not (string-greaterp "abc" "ABC"))
       (not (string-greaterp "ABC" "abc")))))
(define-test sacla-must-string.341 (:tag :sacla)
 (assert-true (= (string-greaterp 'love 'hate) 0)))
(define-test sacla-must-string.342 (:tag :sacla)
 (assert-true (not (string-greaterp 'peace 'war))))
(define-test sacla-must-string.343 (:tag :sacla)
 (assert-true (not (string-greaterp 'love 'love))))
(define-test sacla-must-string.344 (:tag :sacla)
 (assert-true (not (string-greaterp #\a #\a))))
(define-test sacla-must-string.345 (:tag :sacla)
 (assert-true (not (string-greaterp #\a #\b))))
(define-test sacla-must-string.346 (:tag :sacla)
 (assert-true (= (string-greaterp #\z #\a) 0)))
(define-test sacla-must-string.347 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "" "") 0)))
(define-test sacla-must-string.348 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "dog" "dog") 3)))
(define-test sacla-must-string.349 (:tag :sacla)
 (assert-true (eql (string-not-greaterp " " " ") 1)))
(define-test sacla-must-string.350 (:tag :sacla)
 (assert-true (not (string-not-greaterp "abc" ""))))
(define-test sacla-must-string.351 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "ab" "abc") 2)))
(define-test sacla-must-string.352 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "aaa" "aba") 1)))
(define-test sacla-must-string.353 (:tag :sacla)
 (assert-true (not (string-not-greaterp "aba" "aaa"))))
(define-test sacla-must-string.354 (:tag :sacla)
 (assert-true
  (eql (string-not-greaterp "my cat food" "your dog food" :start1 6 :start2 8)
       11)))
(define-test sacla-must-string.355 (:tag :sacla)
 (assert-true
  (eql
   (string-not-greaterp "cat food 2 dollars"
                        "dog food 3 dollars"
                        :start1 3
                        :end1 9
                        :start2 3
                        :end2 9)
   9)))
(define-test sacla-must-string.356 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "xyzabc" "abcd" :start1 3) 6)))
(define-test sacla-must-string.357 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "abc" "abc" :end1 1) 1)))
(define-test sacla-must-string.358 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "xyzabc" "abc" :start1 3 :end1 5) 5)))
(define-test sacla-must-string.359 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "xyz" "abcxyzXYZ" :start2 3) 3)))
(define-test sacla-must-string.360 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "abc" "abcxyz" :end2 3) 3)))
(define-test sacla-must-string.361 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "xyz" "abcxyz" :end1 2 :start2 3) 2)))
(define-test sacla-must-string.362 (:tag :sacla)
 (assert-true
  (eql (string-not-greaterp "xyzabc" "abcdef" :start1 3 :end2 3) 6)))
(define-test sacla-must-string.363 (:tag :sacla)
 (assert-true (eql (string-not-greaterp "aaaa" "z") 0)))
(define-test sacla-must-string.364 (:tag :sacla)
 (assert-true
  (eql (string-not-greaterp "pppTTTaTTTqqq" "pTTTxTTT" :start1 3 :start2 1) 6)))
(define-test sacla-must-string.365 (:tag :sacla)
 (assert-true
  (eql
   (string-not-greaterp "pppTTTaTTTqqq"
                        "pTTTxTTT"
                        :start1 6
                        :end1 7
                        :start2 4
                        :end2 5)
   6)))
(define-test sacla-must-string.366 (:tag :sacla)
 (assert-true
  (eql
   (string-not-greaterp (make-array 0 :element-type 'character)
                        (make-array 0 :element-type 'base-char))
   0)))
(define-test sacla-must-string.367 (:tag :sacla)
 (assert-true
  (and (eql (string-not-greaterp "abc" "ABC") 3)
       (eql (string-not-greaterp "ABC" "abc") 3))))
(define-test sacla-must-string.368 (:tag :sacla)
 (assert-true (not (string-not-greaterp 'love 'hate))))
(define-test sacla-must-string.369 (:tag :sacla)
 (assert-true (= (string-not-greaterp 'peace 'war) 0)))
(define-test sacla-must-string.370 (:tag :sacla)
 (assert-true (= (string-not-greaterp 'love 'love) 4)))
(define-test sacla-must-string.371 (:tag :sacla)
 (assert-true (= (string-not-greaterp #\a #\a) 1)))
(define-test sacla-must-string.372 (:tag :sacla)
 (assert-true (= (string-not-greaterp #\a #\b) 0)))
(define-test sacla-must-string.373 (:tag :sacla)
 (assert-true (not (string-not-greaterp #\z #\a))))
(define-test sacla-must-string.374 (:tag :sacla)
 (assert-true (eql (string-not-lessp "" "") 0)))
(define-test sacla-must-string.375 (:tag :sacla)
 (assert-true (eql (string-not-lessp "dog" "dog") 3)))
(define-test sacla-must-string.376 (:tag :sacla)
 (assert-true (eql (string-not-lessp " " " ") 1)))
(define-test sacla-must-string.377 (:tag :sacla)
 (assert-true (eql (string-not-lessp "abc" "") 0)))
(define-test sacla-must-string.378 (:tag :sacla)
 (assert-true (not (string-not-lessp "" "abc"))))
(define-test sacla-must-string.379 (:tag :sacla)
 (assert-true (not (string-not-lessp "ab" "abc"))))
(define-test sacla-must-string.380 (:tag :sacla)
 (assert-true (eql (string-not-lessp "abc" "ab") 2)))
(define-test sacla-must-string.381 (:tag :sacla)
 (assert-true (eql (string-not-lessp "aba" "aaa") 1)))
(define-test sacla-must-string.382 (:tag :sacla)
 (assert-true (not (string-not-lessp "aaa" "aba"))))
(define-test sacla-must-string.383 (:tag :sacla)
 (assert-true
  (eql (string-not-lessp "my cat food" "your dog food" :start1 6 :start2 8)
       11)))
(define-test sacla-must-string.384 (:tag :sacla)
 (assert-true
  (eql
   (string-not-lessp "cat food 2 dollars"
                     "dog food 3 dollars"
                     :start1 3
                     :end1 9
                     :start2 3
                     :end2 9)
   9)))
(define-test sacla-must-string.385 (:tag :sacla)
 (assert-true (eql (string-not-lessp "xyzabcde" "abcd" :start1 3) 7)))
(define-test sacla-must-string.386 (:tag :sacla)
 (assert-true (not (string-not-lessp "abc" "abc" :end1 1))))
(define-test sacla-must-string.387 (:tag :sacla)
 (assert-true (eql (string-not-lessp "xyzabc" "a" :start1 3 :end1 5) 4)))
(define-test sacla-must-string.388 (:tag :sacla)
 (assert-true (eql (string-not-lessp "xyzXYZ" "abcxyz" :start2 3) 3)))
(define-test sacla-must-string.389 (:tag :sacla)
 (assert-true (eql (string-not-lessp "abcxyz" "abcxyz" :end2 3) 3)))
(define-test sacla-must-string.390 (:tag :sacla)
 (assert-true (not (string-not-lessp "xyzXYZ" "abcxyz" :end1 2 :start2 3))))
(define-test sacla-must-string.391 (:tag :sacla)
 (assert-true (eql (string-not-lessp "xyzabc" "abcdef" :start1 3 :end2 3) 6)))
(define-test sacla-must-string.392 (:tag :sacla)
 (assert-true (eql (string-not-lessp "z" "aaaa") 0)))
(define-test sacla-must-string.393 (:tag :sacla)
 (assert-true
  (eql (string-not-lessp "pTTTxTTTqqq" "pppTTTaTTT" :start1 1 :start2 3) 4)))
(define-test sacla-must-string.394 (:tag :sacla)
 (assert-true
  (eql
   (string-not-lessp "pppTTTxTTTqqq"
                     "pTTTaTTT"
                     :start1 6
                     :end1 7
                     :start2 4
                     :end2 5)
   6)))
(define-test sacla-must-string.395 (:tag :sacla)
 (assert-true
  (eql
   (string-not-lessp (make-array 0 :element-type 'character)
                     (make-array 0 :element-type 'base-char))
   0)))
(define-test sacla-must-string.396 (:tag :sacla)
 (assert-true
  (and (eql (string-not-lessp "abc" "ABC") 3)
       (eql (string-not-lessp "ABC" "abc") 3))))
(define-test sacla-must-string.397 (:tag :sacla)
 (assert-true (= (string-not-lessp 'love 'hate) 0)))
(define-test sacla-must-string.398 (:tag :sacla)
 (assert-true (not (string-not-lessp 'peace 'war))))
(define-test sacla-must-string.399 (:tag :sacla)
 (assert-true (= (string-not-lessp 'love 'love) 4)))
(define-test sacla-must-string.400 (:tag :sacla)
 (assert-true (= (string-not-lessp #\a #\a) 1)))
(define-test sacla-must-string.401 (:tag :sacla)
 (assert-true (not (string-not-lessp #\a #\b))))
(define-test sacla-must-string.402 (:tag :sacla)
 (assert-true (= (string-not-lessp #\z #\a) 0)))
(define-test sacla-must-string.403 (:tag :sacla)
 (assert-true (stringp "aaaaaa")))
(define-test sacla-must-string.404 (:tag :sacla)
 (assert-true (stringp (make-array 0 :element-type 'character))))
(define-test sacla-must-string.405 (:tag :sacla)
 (assert-true (stringp (make-array 0 :element-type 'base-char))))
(define-test sacla-must-string.406 (:tag :sacla)
 (assert-true (stringp (make-array 0 :element-type 'standard-char))))
(define-test sacla-must-string.407 (:tag :sacla)
 (assert-true (not (stringp #\a))))
(define-test sacla-must-string.408 (:tag :sacla)
 (assert-true (not (stringp 'a))))
(define-test sacla-must-string.409 (:tag :sacla)
 (assert-true (not (stringp '(string)))))
(define-test sacla-must-string.410 (:tag :sacla)
 (assert-true (string= (make-string 3 :initial-element #\a) "aaa")))
(define-test sacla-must-string.411 (:tag :sacla)
 (assert-true
  (let ((str (make-string 3)))
    (and (simple-string-p str)
         (setf (schar str 0) #\x)
         (setf (schar str 1) #\y)
         (setf (schar str 2) #\z)
         (string= str "xyz")))))
(define-test sacla-must-string.412 (:tag :sacla)
 (assert-true (string= (make-string 1 :initial-element #\ ) " ")))
(define-test sacla-must-string.413 (:tag :sacla)
 (assert-true (string= (make-string 0) "")))
(define-test sacla-must-string.414 (:tag :sacla)
 (assert-true
  (subtypep
   (upgraded-array-element-type
    (array-element-type (make-string 3 :element-type 'standard-char)))
   'character)))

